{
  "openapi": "3.0.3",
  "info": {
    "title": "SolanaFM API Overview",
    "description": "A list of API endpoints that are exposed to the public",
    "contact": {
      "name": "Elvis Yong"
    },
    "license": {
      "name": "MIT"
    },
    "version": "0.2.9"
  },
  "servers": [
    {
      "url": "https://api.solana.fm"
    }
  ],
  "paths": {
    "/v0/accounts": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get tagged accounts",
        "description": "Get tagged accounts\n<h3>The endpoint supports batch retrieval of accounts with the ability to customise the query</h3>",
        "operationId": "get_multiple_accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "accountHashes"
                ],
                "properties": {
                  "accountHashes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The account/wallet hashes to query for",
                    "example": [
                      "Cs23cJMRuahuKh5oNhVmLhM2UrtaZLULLF3HqrxfTnHc",
                      "A6TDkkwU1BS6Ywe5xcaWsZjuYci8YzzqXA6363khgoP5"
                    ]
                  },
                  "fields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Specify the field objects to be returned in the result\nAvailable array fields: `data`, `onchain`, `*`",
                    "example": [
                      "onchain"
                    ],
                    "nullable": true
                  }
                }
              },
              "example": [
                "Cs23cJMRuahuKh5oNhVmLhM2UrtaZLULLF3HqrxfTnHc",
                "A6TDkkwU1BS6Ywe5xcaWsZjuYci8YzzqXA6363khgoP5"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns an array of account information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "accountHash"
                    ],
                    "properties": {
                      "accountHash": {
                        "type": "string",
                        "description": "The pubkey of the account returned"
                      },
                      "data": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "friendlyName",
                              "abbreviation",
                              "category",
                              "network",
                              "tags"
                            ],
                            "properties": {
                              "abbreviation": {
                                "type": "string",
                                "description": "Account abbreviation (e.g. USDC)"
                              },
                              "category": {
                                "type": "string",
                                "description": "Category of the Account (e.g. Tokens)"
                              },
                              "flag": {
                                "type": "string",
                                "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                                "nullable": true
                              },
                              "friendlyName": {
                                "type": "string",
                                "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                              },
                              "logoURI": {
                                "type": "string",
                                "description": "Image url for the account",
                                "nullable": true
                              },
                              "network": {
                                "type": "string",
                                "description": "(e.g. mainnet/devnet)"
                              },
                              "tags": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "SolanaFM labelled tags"
                              },
                              "voteKey": {
                                "type": "string",
                                "description": "Vote key only exists for validator accounts",
                                "nullable": true
                              }
                            }
                          }
                        ],
                        "nullable": true
                      },
                      "onchain": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "lamports",
                              "data",
                              "owner",
                              "executable",
                              "rentEpoch"
                            ],
                            "properties": {
                              "data": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "info",
                                      "account_type"
                                    ],
                                    "properties": {
                                      "account_type": {
                                        "type": "string"
                                      },
                                      "info": {}
                                    }
                                  }
                                ]
                              },
                              "executable": {
                                "type": "boolean",
                                "description": "Indicates whether the account is an executable account or not"
                              },
                              "lamports": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Amount of lamports in the account",
                                "minimum": 0
                              },
                              "owner": {
                                "type": "string",
                                "description": "Owner of the account"
                              },
                              "rentEpoch": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Rent epoch of the account",
                                "minimum": 0
                              }
                            }
                          }
                        ],
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/accounts/{hash}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a specific tagged account",
        "description": "Get a specific tagged account\n<h3>This endpoint returns you the account data related to the account that you queried for given the account hash</h3>",
        "operationId": "get_account",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "The account/wallet hash to query for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AK2VbkdYLHSiJKS6AGUfNZYNaejABkV6VYDX1Vrgxfo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "accountHash",
                    "data"
                  ],
                  "properties": {
                    "accountHash": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "friendlyName",
                        "abbreviation",
                        "category",
                        "network",
                        "tags"
                      ],
                      "properties": {
                        "abbreviation": {
                          "type": "string",
                          "description": "Account abbreviation (e.g. USDC)"
                        },
                        "category": {
                          "type": "string",
                          "description": "Category of the Account (e.g. Tokens)"
                        },
                        "flag": {
                          "type": "string",
                          "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                          "nullable": true
                        },
                        "friendlyName": {
                          "type": "string",
                          "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                        },
                        "logoURI": {
                          "type": "string",
                          "description": "Image url for the account",
                          "nullable": true
                        },
                        "network": {
                          "type": "string",
                          "description": "(e.g. mainnet/devnet)"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "SolanaFM labelled tags"
                        },
                        "voteKey": {
                          "type": "string",
                          "description": "Vote key only exists for validator accounts",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Account Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/accounts/{hash}/fees": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Account's Transaction Fees",
        "description": "Account's Transaction Fees\n<h3>This endpoint returns you transactions fees accrued by account on a daily basis</h3>",
        "operationId": "get_account_tx_fees",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "The account/wallet hash to query for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AK2VbkdYLHSiJKS6AGUfNZYNaejABkV6VYDX1Vrgxfo"
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start date to query for",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "2024-01-01"
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end date to query for",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "2024-02-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved account transaction fees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "tx_fees",
                      "time"
                    ],
                    "properties": {
                      "time": {
                        "type": "string"
                      },
                      "tx_fees": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Transaction Fees accrued for the day"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/blocks": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get Blocks",
        "description": "Get Blocks\n<h3>This endpoint returns you a paginated list of blocks</h3>",
        "operationId": "get_blocks_by_pagination",
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "Input the optional query parameters",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "from": {
                      "type": "string",
                      "description": "Cursor to the next/previous page.\nWhen not provided, latest blocks will be returned",
                      "nullable": true
                    },
                    "pageSize": {
                      "type": "integer",
                      "description": "Defines the number of blocks returned in a page.\nDefaults to 50 when not provided",
                      "nullable": true,
                      "minimum": 0
                    },
                    "paginationType": {
                      "type": "string",
                      "description": "Sets the pagination type (either `blockNumber` or `blockTime`)",
                      "nullable": true
                    },
                    "reverse": {
                      "type": "boolean",
                      "description": "Only accepts (True/False).\nIndicates the pagination order of the block.\nIf set true, returns an ascending order from older blocks to newer blocks.\nIf set false, returns a descending order from newer blocks to older blocks.",
                      "nullable": true
                    }
                  }
                }
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved blocks by pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "pagination"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "blockNumber",
                          "data"
                        ],
                        "properties": {
                          "blockNumber": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The block number retrieved",
                            "minimum": 0
                          },
                          "data": {
                            "type": "object",
                            "required": [
                              "epoch",
                              "previousHash",
                              "producer",
                              "hash",
                              "parentNumber",
                              "number",
                              "dataSize",
                              "numberOfTransactions",
                              "successfulTransactions",
                              "voteTransactions",
                              "totalTxFees",
                              "numberOfRewards",
                              "totalRewardAmount",
                              "totalComputeUnitsConsumed",
                              "totalComputeUnitsLimit",
                              "blockTime"
                            ],
                            "properties": {
                              "blockTime": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The time that this block is produced",
                                "minimum": 0
                              },
                              "dataSize": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The data size of this block",
                                "minimum": 0
                              },
                              "epoch": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The epoch that this block belongs to",
                                "minimum": 0
                              },
                              "hash": {
                                "type": "string",
                                "description": "The block hash"
                              },
                              "number": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The block number",
                                "minimum": 0
                              },
                              "numberOfRewards": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The number of rewards being issued",
                                "minimum": 0
                              },
                              "numberOfTransactions": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The number of transactions produced in this block",
                                "minimum": 0
                              },
                              "parentNumber": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The parent's block number",
                                "minimum": 0
                              },
                              "previousHash": {
                                "type": "string",
                                "description": "The previous block's block hash"
                              },
                              "producer": {
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "String"
                                    ],
                                    "properties": {
                                      "String": {
                                        "type": "string",
                                        "description": "The block producer account hash"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "Account"
                                    ],
                                    "properties": {
                                      "Account": {
                                        "type": "object",
                                        "required": [
                                          "accountHash"
                                        ],
                                        "properties": {
                                          "accountHash": {
                                            "type": "string",
                                            "description": "The pubkey of the account returned"
                                          },
                                          "data": {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "required": [
                                                  "friendlyName",
                                                  "abbreviation",
                                                  "category",
                                                  "network",
                                                  "tags"
                                                ],
                                                "properties": {
                                                  "abbreviation": {
                                                    "type": "string",
                                                    "description": "Account abbreviation (e.g. USDC)"
                                                  },
                                                  "category": {
                                                    "type": "string",
                                                    "description": "Category of the Account (e.g. Tokens)"
                                                  },
                                                  "flag": {
                                                    "type": "string",
                                                    "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                                                    "nullable": true
                                                  },
                                                  "friendlyName": {
                                                    "type": "string",
                                                    "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                                                  },
                                                  "logoURI": {
                                                    "type": "string",
                                                    "description": "Image url for the account",
                                                    "nullable": true
                                                  },
                                                  "network": {
                                                    "type": "string",
                                                    "description": "(e.g. mainnet/devnet)"
                                                  },
                                                  "tags": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "description": "SolanaFM labelled tags"
                                                  },
                                                  "voteKey": {
                                                    "type": "string",
                                                    "description": "Vote key only exists for validator accounts",
                                                    "nullable": true
                                                  }
                                                }
                                              }
                                            ],
                                            "nullable": true
                                          },
                                          "onchain": {
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "required": [
                                                  "lamports",
                                                  "data",
                                                  "owner",
                                                  "executable",
                                                  "rentEpoch"
                                                ],
                                                "properties": {
                                                  "data": {
                                                    "oneOf": [
                                                      {
                                                        "type": "string",
                                                        "format": "binary"
                                                      },
                                                      {
                                                        "type": "array",
                                                        "items": {
                                                          "type": "string"
                                                        }
                                                      },
                                                      {
                                                        "type": "object",
                                                        "required": [
                                                          "info",
                                                          "account_type"
                                                        ],
                                                        "properties": {
                                                          "account_type": {
                                                            "type": "string"
                                                          },
                                                          "info": {}
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "executable": {
                                                    "type": "boolean",
                                                    "description": "Indicates whether the account is an executable account or not"
                                                  },
                                                  "lamports": {
                                                    "type": "integer",
                                                    "format": "int64",
                                                    "description": "Amount of lamports in the account",
                                                    "minimum": 0
                                                  },
                                                  "owner": {
                                                    "type": "string",
                                                    "description": "Owner of the account"
                                                  },
                                                  "rentEpoch": {
                                                    "type": "integer",
                                                    "format": "int64",
                                                    "description": "Rent epoch of the account",
                                                    "minimum": 0
                                                  }
                                                }
                                              }
                                            ],
                                            "nullable": true
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "successfulTransactions": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The number of successful transactions in this block",
                                "minimum": 0
                              },
                              "totalComputeUnitsConsumed": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The total compute units consumed producing this block",
                                "minimum": 0
                              },
                              "totalComputeUnitsLimit": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The total compute limits indicated for this block",
                                "minimum": 0
                              },
                              "totalRewardAmount": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The total reward amount",
                                "minimum": 0
                              },
                              "totalTxFees": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The total transaction fees collected in the block",
                                "minimum": 0
                              },
                              "voteTransactions": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The number of vote transactions in this blocl",
                                "minimum": 0
                              }
                            }
                          }
                        }
                      },
                      "description": "A list of block data to be returned"
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The next cursor pointer",
                          "nullable": true,
                          "minimum": 0
                        },
                        "previous": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The previous cursor pointer",
                          "nullable": true,
                          "minimum": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get Multiple Blocks",
        "description": "Get Multiple Blocks\n<h3>This endpoint returns you a list of blocks based on the input block numbers with the ability to customise the query</h3>",
        "operationId": "get_multiple_blocks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "blockNumbers"
                ],
                "properties": {
                  "blockNumbers": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64",
                      "minimum": 0
                    },
                    "description": "A list of block numbers to query for"
                  },
                  "hydration": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "accountHash"
                        ],
                        "properties": {
                          "accountHash": {
                            "type": "boolean",
                            "description": "(true/false) to include hydration of account info in the response"
                          }
                        }
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved blocks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "blockNumber",
                      "data"
                    ],
                    "properties": {
                      "blockNumber": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The block number retrieved",
                        "minimum": 0
                      },
                      "data": {
                        "type": "object",
                        "required": [
                          "epoch",
                          "previousHash",
                          "producer",
                          "hash",
                          "parentNumber",
                          "number",
                          "dataSize",
                          "numberOfTransactions",
                          "successfulTransactions",
                          "voteTransactions",
                          "totalTxFees",
                          "numberOfRewards",
                          "totalRewardAmount",
                          "totalComputeUnitsConsumed",
                          "totalComputeUnitsLimit",
                          "blockTime"
                        ],
                        "properties": {
                          "blockTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The time that this block is produced",
                            "minimum": 0
                          },
                          "dataSize": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The data size of this block",
                            "minimum": 0
                          },
                          "epoch": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The epoch that this block belongs to",
                            "minimum": 0
                          },
                          "hash": {
                            "type": "string",
                            "description": "The block hash"
                          },
                          "number": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The block number",
                            "minimum": 0
                          },
                          "numberOfRewards": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of rewards being issued",
                            "minimum": 0
                          },
                          "numberOfTransactions": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of transactions produced in this block",
                            "minimum": 0
                          },
                          "parentNumber": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The parent's block number",
                            "minimum": 0
                          },
                          "previousHash": {
                            "type": "string",
                            "description": "The previous block's block hash"
                          },
                          "producer": {
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "String"
                                ],
                                "properties": {
                                  "String": {
                                    "type": "string",
                                    "description": "The block producer account hash"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "Account"
                                ],
                                "properties": {
                                  "Account": {
                                    "type": "object",
                                    "required": [
                                      "accountHash"
                                    ],
                                    "properties": {
                                      "accountHash": {
                                        "type": "string",
                                        "description": "The pubkey of the account returned"
                                      },
                                      "data": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "required": [
                                              "friendlyName",
                                              "abbreviation",
                                              "category",
                                              "network",
                                              "tags"
                                            ],
                                            "properties": {
                                              "abbreviation": {
                                                "type": "string",
                                                "description": "Account abbreviation (e.g. USDC)"
                                              },
                                              "category": {
                                                "type": "string",
                                                "description": "Category of the Account (e.g. Tokens)"
                                              },
                                              "flag": {
                                                "type": "string",
                                                "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                                                "nullable": true
                                              },
                                              "friendlyName": {
                                                "type": "string",
                                                "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                                              },
                                              "logoURI": {
                                                "type": "string",
                                                "description": "Image url for the account",
                                                "nullable": true
                                              },
                                              "network": {
                                                "type": "string",
                                                "description": "(e.g. mainnet/devnet)"
                                              },
                                              "tags": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "description": "SolanaFM labelled tags"
                                              },
                                              "voteKey": {
                                                "type": "string",
                                                "description": "Vote key only exists for validator accounts",
                                                "nullable": true
                                              }
                                            }
                                          }
                                        ],
                                        "nullable": true
                                      },
                                      "onchain": {
                                        "allOf": [
                                          {
                                            "type": "object",
                                            "required": [
                                              "lamports",
                                              "data",
                                              "owner",
                                              "executable",
                                              "rentEpoch"
                                            ],
                                            "properties": {
                                              "data": {
                                                "oneOf": [
                                                  {
                                                    "type": "string",
                                                    "format": "binary"
                                                  },
                                                  {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  {
                                                    "type": "object",
                                                    "required": [
                                                      "info",
                                                      "account_type"
                                                    ],
                                                    "properties": {
                                                      "account_type": {
                                                        "type": "string"
                                                      },
                                                      "info": {}
                                                    }
                                                  }
                                                ]
                                              },
                                              "executable": {
                                                "type": "boolean",
                                                "description": "Indicates whether the account is an executable account or not"
                                              },
                                              "lamports": {
                                                "type": "integer",
                                                "format": "int64",
                                                "description": "Amount of lamports in the account",
                                                "minimum": 0
                                              },
                                              "owner": {
                                                "type": "string",
                                                "description": "Owner of the account"
                                              },
                                              "rentEpoch": {
                                                "type": "integer",
                                                "format": "int64",
                                                "description": "Rent epoch of the account",
                                                "minimum": 0
                                              }
                                            }
                                          }
                                        ],
                                        "nullable": true
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "successfulTransactions": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of successful transactions in this block",
                            "minimum": 0
                          },
                          "totalComputeUnitsConsumed": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total compute units consumed producing this block",
                            "minimum": 0
                          },
                          "totalComputeUnitsLimit": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total compute limits indicated for this block",
                            "minimum": 0
                          },
                          "totalRewardAmount": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total reward amount",
                            "minimum": 0
                          },
                          "totalTxFees": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The total transaction fees collected in the block",
                            "minimum": 0
                          },
                          "voteTransactions": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of vote transactions in this blocl",
                            "minimum": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/blocks/{block_number}": {
      "get": {
        "tags": [
          "Blocks"
        ],
        "summary": "Get A Specific Block",
        "description": "Get A Specific Block\n<h3>This endpoints returns you the information of the block given the block number</h3>",
        "operationId": "get_block",
        "parameters": [
          {
            "name": "block_number",
            "in": "path",
            "description": "The block number to query for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "example": 200000000
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved block",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "blockNumber",
                    "data"
                  ],
                  "properties": {
                    "blockNumber": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The block number retrieved",
                      "minimum": 0
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "epoch",
                        "previousHash",
                        "producer",
                        "hash",
                        "parentNumber",
                        "number",
                        "dataSize",
                        "numberOfTransactions",
                        "successfulTransactions",
                        "voteTransactions",
                        "totalTxFees",
                        "numberOfRewards",
                        "totalRewardAmount",
                        "totalComputeUnitsConsumed",
                        "totalComputeUnitsLimit",
                        "blockTime"
                      ],
                      "properties": {
                        "blockTime": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The time that this block is produced",
                          "minimum": 0
                        },
                        "dataSize": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The data size of this block",
                          "minimum": 0
                        },
                        "epoch": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The epoch that this block belongs to",
                          "minimum": 0
                        },
                        "hash": {
                          "type": "string",
                          "description": "The block hash"
                        },
                        "number": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The block number",
                          "minimum": 0
                        },
                        "numberOfRewards": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of rewards being issued",
                          "minimum": 0
                        },
                        "numberOfTransactions": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of transactions produced in this block",
                          "minimum": 0
                        },
                        "parentNumber": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The parent's block number",
                          "minimum": 0
                        },
                        "previousHash": {
                          "type": "string",
                          "description": "The previous block's block hash"
                        },
                        "producer": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "String"
                              ],
                              "properties": {
                                "String": {
                                  "type": "string",
                                  "description": "The block producer account hash"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "Account"
                              ],
                              "properties": {
                                "Account": {
                                  "type": "object",
                                  "required": [
                                    "accountHash"
                                  ],
                                  "properties": {
                                    "accountHash": {
                                      "type": "string",
                                      "description": "The pubkey of the account returned"
                                    },
                                    "data": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "friendlyName",
                                            "abbreviation",
                                            "category",
                                            "network",
                                            "tags"
                                          ],
                                          "properties": {
                                            "abbreviation": {
                                              "type": "string",
                                              "description": "Account abbreviation (e.g. USDC)"
                                            },
                                            "category": {
                                              "type": "string",
                                              "description": "Category of the Account (e.g. Tokens)"
                                            },
                                            "flag": {
                                              "type": "string",
                                              "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                                              "nullable": true
                                            },
                                            "friendlyName": {
                                              "type": "string",
                                              "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                                            },
                                            "logoURI": {
                                              "type": "string",
                                              "description": "Image url for the account",
                                              "nullable": true
                                            },
                                            "network": {
                                              "type": "string",
                                              "description": "(e.g. mainnet/devnet)"
                                            },
                                            "tags": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "SolanaFM labelled tags"
                                            },
                                            "voteKey": {
                                              "type": "string",
                                              "description": "Vote key only exists for validator accounts",
                                              "nullable": true
                                            }
                                          }
                                        }
                                      ],
                                      "nullable": true
                                    },
                                    "onchain": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "lamports",
                                            "data",
                                            "owner",
                                            "executable",
                                            "rentEpoch"
                                          ],
                                          "properties": {
                                            "data": {
                                              "oneOf": [
                                                {
                                                  "type": "string",
                                                  "format": "binary"
                                                },
                                                {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                },
                                                {
                                                  "type": "object",
                                                  "required": [
                                                    "info",
                                                    "account_type"
                                                  ],
                                                  "properties": {
                                                    "account_type": {
                                                      "type": "string"
                                                    },
                                                    "info": {}
                                                  }
                                                }
                                              ]
                                            },
                                            "executable": {
                                              "type": "boolean",
                                              "description": "Indicates whether the account is an executable account or not"
                                            },
                                            "lamports": {
                                              "type": "integer",
                                              "format": "int64",
                                              "description": "Amount of lamports in the account",
                                              "minimum": 0
                                            },
                                            "owner": {
                                              "type": "string",
                                              "description": "Owner of the account"
                                            },
                                            "rentEpoch": {
                                              "type": "integer",
                                              "format": "int64",
                                              "description": "Rent epoch of the account",
                                              "minimum": 0
                                            }
                                          }
                                        }
                                      ],
                                      "nullable": true
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "successfulTransactions": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of successful transactions in this block",
                          "minimum": 0
                        },
                        "totalComputeUnitsConsumed": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The total compute units consumed producing this block",
                          "minimum": 0
                        },
                        "totalComputeUnitsLimit": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The total compute limits indicated for this block",
                          "minimum": 0
                        },
                        "totalRewardAmount": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The total reward amount",
                          "minimum": 0
                        },
                        "totalTxFees": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The total transaction fees collected in the block",
                          "minimum": 0
                        },
                        "voteTransactions": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of vote transactions in this blocl",
                          "minimum": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Block Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/domains/bonfida": {
      "post": {
        "tags": [
          "Bonfida Domains"
        ],
        "summary": "Accounts' Domains",
        "description": "Accounts' Domains\n<h3>This endpoint retrieves all domains and subdomains owned by the provided account hash</h3>",
        "operationId": "get_multiple_domains_and_subdomains_by_hash",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "accountHashes"
                ],
                "properties": {
                  "accountHashes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved domains and subdomains by multiple accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "required": [
                      "owner",
                      "domains"
                    ],
                    "properties": {
                      "domains": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "nameServiceAccount",
                            "subdomains"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the domain"
                            },
                            "nameServiceAccount": {
                              "type": "string",
                              "description": "The name service account hash of the domain"
                            },
                            "subdomains": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "name",
                                  "subdomainHash"
                                ],
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the subdomain"
                                  },
                                  "subdomainHash": {
                                    "type": "string",
                                    "description": "The subdomain account hash"
                                  }
                                }
                              },
                              "description": "A list of subdomains that belongs to this current domain"
                            }
                          }
                        },
                        "description": "A list of Bonfida Domain Objects"
                      },
                      "owner": {
                        "type": "string",
                        "description": "The owner hash of the domain/subdomain account"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/domains/bonfida/favourites": {
      "post": {
        "tags": [
          "Bonfida Domains"
        ],
        "summary": "Account Favourite Domain",
        "description": "Account Favourite Domain\n<h3>This endpoint returns you the favourited domain of the account hash provided</h3>",
        "operationId": "get_favourite_domains_by_multiple_accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "accountHashes",
                  "fidaType"
                ],
                "properties": {
                  "accountHashes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The list of domain owner account hashes to query for"
                  },
                  "fidaType": {
                    "type": "string",
                    "description": "Fida type to filter the results\nOptions are either `OWNER` or `NAME_SERVICE`"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved favourite domains by multiple accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "owner",
                      "name",
                      "nameServiceAccount"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the domain"
                      },
                      "nameServiceAccount": {
                        "type": "string",
                        "description": "The name service account hash of the domain"
                      },
                      "owner": {
                        "type": "string",
                        "description": "The domain owner's account hash"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/domains/bonfida/favourites/{hash}": {
      "get": {
        "tags": [
          "Bonfida Domains"
        ],
        "summary": "Get User's Favourite Domains",
        "description": "Get User's Favourite Domains\n<h3>This endpoint returns you a list of domains that are set as favourite by the account hash provided</h3>",
        "operationId": "get_favourite_domains_by_account",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "The wallet hash that owns the domain",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AK2VbkdYLHSiJKS6AGUfNZYNaejABkV6VYDX1Vrgxfo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved favourite domains by account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "domains"
                  ],
                  "properties": {
                    "domains": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "nameServiceAccount",
                          "owner",
                          "favourite"
                        ],
                        "properties": {
                          "favourite": {
                            "type": "boolean",
                            "description": "Indicates whether the domain is set as favourite"
                          },
                          "name": {
                            "type": "string",
                            "description": "The domain name"
                          },
                          "nameServiceAccount": {
                            "type": "string",
                            "description": "The account hash of the domain"
                          },
                          "owner": {
                            "type": "string",
                            "description": "The owner's hash of the domain"
                          }
                        }
                      },
                      "description": "A list of favoutire domains"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/domains/bonfida/subdomains": {
      "post": {
        "tags": [
          "Bonfida Domains"
        ],
        "summary": "Subdomains Of Multiple Accounts",
        "description": "Subdomains Of Multiple Accounts\n<h3>This endpoint returns you a list of subdomains owned based on the account hashes that you input</h3>",
        "operationId": "get_subdomains_by_multiple_accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "accountHashes"
                ],
                "properties": {
                  "accountHashes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The list of domain owner's account hashes"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved subdomains by multiple accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "owner",
                      "subdomains"
                    ],
                    "properties": {
                      "owner": {
                        "type": "string",
                        "description": "The owner's hash of the domain"
                      },
                      "subdomains": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "subdomainHash"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the subdomain"
                            },
                            "subdomainHash": {
                              "type": "string",
                              "description": "The subdomain account hash"
                            }
                          }
                        },
                        "description": "The list of subdomains owned"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/domains/bonfida/subdomains/{hash}": {
      "get": {
        "tags": [
          "Bonfida Domains"
        ],
        "summary": "Get An Account's Subdomains",
        "description": "Get An Account's Subdomains\n<h3>This endpoint returns you subdomains that are owned by the given account hash</h3>",
        "operationId": "get_subdomains_by_account",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "The domain owner's account hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AK2VbkdYLHSiJKS6AGUfNZYNaejABkV6VYDX1Vrgxfo"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved subdomains by account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "owner",
                    "subdomains"
                  ],
                  "properties": {
                    "owner": {
                      "type": "string",
                      "description": "The owner's hash of the domain"
                    },
                    "subdomains": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "subdomainHash"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the subdomain"
                          },
                          "subdomainHash": {
                            "type": "string",
                            "description": "The subdomain account hash"
                          }
                        }
                      },
                      "description": "The list of subdomains owned"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/domains/bonfida/{hash}": {
      "get": {
        "tags": [
          "Bonfida Domains"
        ],
        "summary": "Specific Account's Domains",
        "description": "Specific Account's Domains\n<h3>This endpoint retrieves all domains and subdomains owned by the provided account hash</h3>",
        "operationId": "get_domains_and_subdomains_by_hash",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "The wallet hash that owns a domain/subdomain",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nix9RErnQYXpuf329ntPgSzThogtfeyUempD7zDrnSH"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved domains and subdomains by hash",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "owner",
                      "domains"
                    ],
                    "properties": {
                      "domains": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "name",
                            "nameServiceAccount",
                            "subdomains"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the domain"
                            },
                            "nameServiceAccount": {
                              "type": "string",
                              "description": "The name service account hash of the domain"
                            },
                            "subdomains": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "name",
                                  "subdomainHash"
                                ],
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the subdomain"
                                  },
                                  "subdomainHash": {
                                    "type": "string",
                                    "description": "The subdomain account hash"
                                  }
                                }
                              },
                              "description": "A list of subdomains that belongs to this current domain"
                            }
                          }
                        },
                        "description": "A list of Bonfida Domain Objects"
                      },
                      "owner": {
                        "type": "string",
                        "description": "The owner hash of the domain/subdomain account"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/stats/tx-fees": {
      "get": {
        "tags": [
          "Solana Daily Data"
        ],
        "summary": "Solana Daily Transaction Fees",
        "description": "Solana Daily Transaction Fees\n<h3>This endpoint returns you the total transaction fees in <i style=\"text-decoration: underline\">lamports</i> for the specified\ndate. If no date is specified, it will be defaulted to today's date</h3>",
        "operationId": "get_daily_tx_fees",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "The date in `dd-mm-yyyy` format to get the transaction fees",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "19-07-2022"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved daily tx fees",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "date",
                    "totalTxFees"
                  ],
                  "properties": {
                    "date": {
                      "type": "string",
                      "description": "The date of the data retrieved"
                    },
                    "totalTxFees": {
                      "type": "integer",
                      "description": "The total transaction fees accumulated",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/tokens": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "SolanaFM Tagged Token List",
        "description": "SolanaFM Tagged Token List\n<h3>This end point returns you a paginated list of tokens available from our data store.\nYou can paginate through the response body to index all available tokens</h3>",
        "operationId": "get_tokens_by_pagination",
        "responses": {
          "200": {
            "description": "Successfully retrieved tokens by pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data",
                    "pagination"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "tokenHash",
                          "data"
                        ],
                        "properties": {
                          "data": {
                            "type": "object",
                            "required": [
                              "mint",
                              "cache_name",
                              "cache_symbol",
                              "decimals",
                              "description",
                              "cache_logo",
                              "tags",
                              "verified",
                              "network",
                              "metadata_token"
                            ],
                            "properties": {
                              "cache_logo": {
                                "type": "string",
                                "description": "Image url of the token logo"
                              },
                              "cache_name": {
                                "type": "string",
                                "description": "Token name (e.g. USD Coin) that is either indexed or labelled by the SolanaFM team"
                              },
                              "cache_symbol": {
                                "type": "string",
                                "description": "Token symbol (e.g. USDC) that is either indexed or labelled by the SolanaFM team"
                              },
                              "decimals": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Decimal place of the token",
                                "minimum": 0
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of the token"
                              },
                              "metadata_token": {
                                "type": "string",
                                "description": "Token's metadata field"
                              },
                              "mint": {
                                "type": "string",
                                "description": "Token mint hash"
                              },
                              "network": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "(e.g. mainnet, devnet)"
                              },
                              "tags": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "SolanaFM labelled tags"
                              },
                              "verified": {
                                "type": "string",
                                "description": "Indicates if the token is verified on-chain"
                              }
                            }
                          },
                          "tokenHash": {
                            "type": "string",
                            "description": "Token hash based on the hash that you queried for"
                          }
                        }
                      },
                      "description": "A list of tokens"
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "next": {
                          "type": "string",
                          "description": "Next cursor string",
                          "nullable": true
                        },
                        "previous": {
                          "type": "string",
                          "description": "Prev cursor string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Multiple Tokens",
        "description": "Multiple Tokens\n<h3>This endpoint allows you to batch retrieve tokens based on a list of provided token hashes</h3>",
        "operationId": "get_tokens_by_account_hashes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "tokenHashes"
                ],
                "properties": {
                  "hydration": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "accountHash"
                        ],
                        "properties": {
                          "accountHash": {
                            "type": "boolean",
                            "description": "(true/false) to include hydration of account info in the response"
                          }
                        }
                      }
                    ],
                    "nullable": true
                  },
                  "tokenHashes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of token hashes to be queried\n(min length: 1, max length: 50)",
                    "example": [
                      "BaconSBRjNckjeQCi6E2Ndg8wSmAwPgmfmZnF6ZmyFhz",
                      "12oQm6EX2yMCQgt4sdno8iEyBaHmMvvH9kJGoM8VaeYX"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved token by account hashes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "tokenHash",
                      "data"
                    ],
                    "properties": {
                      "data": {
                        "type": "object",
                        "required": [
                          "mint",
                          "cache_name",
                          "cache_symbol",
                          "decimals",
                          "description",
                          "cache_logo",
                          "tags",
                          "verified",
                          "network",
                          "metadata_token"
                        ],
                        "properties": {
                          "cache_logo": {
                            "type": "string",
                            "description": "Image url of the token logo"
                          },
                          "cache_name": {
                            "type": "string",
                            "description": "Token name (e.g. USD Coin) that is either indexed or labelled by the SolanaFM team"
                          },
                          "cache_symbol": {
                            "type": "string",
                            "description": "Token symbol (e.g. USDC) that is either indexed or labelled by the SolanaFM team"
                          },
                          "decimals": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Decimal place of the token",
                            "minimum": 0
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the token"
                          },
                          "metadata_token": {
                            "type": "string",
                            "description": "Token's metadata field"
                          },
                          "mint": {
                            "type": "string",
                            "description": "Token mint hash"
                          },
                          "network": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "(e.g. mainnet, devnet)"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "SolanaFM labelled tags"
                          },
                          "verified": {
                            "type": "string",
                            "description": "Indicates if the token is verified on-chain"
                          }
                        }
                      },
                      "tokenHash": {
                        "type": "string",
                        "description": "Token hash based on the hash that you queried for"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/tokens/{hash}": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Token Info",
        "description": "Token Info\n<h3>This endpoint returns you the information of a token based on the token hash provided</h3>",
        "operationId": "get_token_by_account_hash",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "The token hash to query by",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved token by account hash",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "tokenHash",
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "mint",
                        "cache_name",
                        "cache_symbol",
                        "decimals",
                        "description",
                        "cache_logo",
                        "tags",
                        "verified",
                        "network",
                        "metadata_token"
                      ],
                      "properties": {
                        "cache_logo": {
                          "type": "string",
                          "description": "Image url of the token logo"
                        },
                        "cache_name": {
                          "type": "string",
                          "description": "Token name (e.g. USD Coin) that is either indexed or labelled by the SolanaFM team"
                        },
                        "cache_symbol": {
                          "type": "string",
                          "description": "Token symbol (e.g. USDC) that is either indexed or labelled by the SolanaFM team"
                        },
                        "decimals": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Decimal place of the token",
                          "minimum": 0
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the token"
                        },
                        "metadata_token": {
                          "type": "string",
                          "description": "Token's metadata field"
                        },
                        "mint": {
                          "type": "string",
                          "description": "Token mint hash"
                        },
                        "network": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "(e.g. mainnet, devnet)"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "SolanaFM labelled tags"
                        },
                        "verified": {
                          "type": "string",
                          "description": "Indicates if the token is verified on-chain"
                        }
                      }
                    },
                    "tokenHash": {
                      "type": "string",
                      "description": "Token hash based on the hash that you queried for"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/actions": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "All Transfer Actions",
        "description": "All Transfer Actions\n<h3>This endpoint returns you a list of all possible actions identified in a transfers model</h3>",
        "operationId": "get_actions",
        "responses": {
          "200": {
            "description": "Successfully retrieved action headers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "payTxFees",
                  "createAccount"
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/addresses/{account-hash}/tokens": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Owner Token Accounts",
        "description": "Owner Token Accounts\n<h3>This endpoint returns you all the accounts (e.g. token accounts, NFTs, cNFTs) owned by the provided account hash</h3>",
        "operationId": "get_tokens_owned_by_account_handler",
        "parameters": [
          {
            "name": "account-hash",
            "in": "path",
            "description": "The account/wallet hash to query for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AK2VbkdYLHSiJKS6AGUfNZYNaejABkV6VYDX1Vrgxfo"
          },
          {
            "name": "tokenType",
            "in": "query",
            "description": "Filtering the returned results based on the type of account\nAvailable filters: `CompressedNonFungible`, `Fungible`, `Legacy`, `NonFungible`",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "pubkey",
                    "tokens"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "nullable": true
                    },
                    "pubkey": {
                      "type": "string",
                      "description": "Account hash that you input in your API query"
                    },
                    "tokens": {
                      "type": "object",
                      "description": "A key-value mapping of all the initialised token accounts of the owner",
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "mint"
                        ],
                        "properties": {
                          "ata": {
                            "type": "string",
                            "description": "Associated token account of the owner that supports the token mint\nThis field will be null for cNFTs",
                            "nullable": true
                          },
                          "balance": {
                            "type": "number",
                            "format": "double",
                            "description": "The ui amount of the token balance",
                            "nullable": true
                          },
                          "mint": {
                            "type": "string",
                            "description": "The token mint hash"
                          },
                          "tokenData": {
                            "description": "Asset's token details",
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Multiple Tokens Info V1",
        "description": "Multiple Tokens Info V1\n<h3>This endpoint allows batch retrieval of multiple tokens in a single query with the ability to customise the query</h3>",
        "operationId": "retrieve_multiple_tokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tokenHashes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "@deprecated\nUse the tokens field instead, this is to have backwards compatibility with the v0 tokens api",
                    "deprecated": true,
                    "example": [
                      "BaconSBRjNckjeQCi6E2Ndg8wSmAwPgmfmZnF6ZmyFhz",
                      "12oQm6EX2yMCQgt4sdno8iEyBaHmMvvH9kJGoM8VaeYX"
                    ],
                    "nullable": true
                  },
                  "tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The list of token hashes to be queried for",
                    "example": [
                      "BaconSBRjNckjeQCi6E2Ndg8wSmAwPgmfmZnF6ZmyFhz",
                      "12oQm6EX2yMCQgt4sdno8iEyBaHmMvvH9kJGoM8VaeYX"
                    ],
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/{hash}": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Token Info V1",
        "description": "Token Info V1\n<h3>This endpoint returns you information of a token by the given token hash</h3>",
        "operationId": "get_one_token",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Retrieve information about a token given the hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved token",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/{hash}/token-accounts": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "User's Token Accounts",
        "description": "User's Token Accounts\n<h3>This endpoint returns you a list of token accounts owned by the user with an option to filter by Token Mints</h3>",
        "operationId": "get_user_token_accounts",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "includeSolBalance": {
                    "type": "boolean",
                    "description": "Optional parameter to include sol balance of the main wallet",
                    "nullable": true
                  },
                  "tokenHashes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "An array of token mints to filter the token accounts by",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved tokens",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/{mint}/holders": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Mint Token Accounts",
        "description": "Mint Token Accounts\n<h3>This endpoint returns you a paginated list of token accounts owned by the provided token mint</h3>",
        "operationId": "get_token_accounts_for_token_mint",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of the next page to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items to return in a single response",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "mint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tokens",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/{mint}/info": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "On-Chain Token Data",
        "description": "On-Chain Token Data\n<h3>This endpoint returns you the token data stored on-chain</h3>",
        "operationId": "get_tfi_token_data",
        "parameters": [
          {
            "name": "mint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tokens",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/tokens/{mint}/supply": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Token Supply",
        "description": "Token Supply\n<h3>This endpoint returns you on-chain token supply information</h3>",
        "operationId": "get_token_circulating_supply",
        "parameters": [
          {
            "name": "mint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "circulatingSupply": {
                      "type": "number",
                      "format": "double",
                      "description": "The circulating supply indicated on the token",
                      "nullable": true
                    },
                    "decimals": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The decimals position",
                      "nullable": true,
                      "minimum": 0
                    },
                    "realCirculatingSupply": {
                      "type": "number",
                      "format": "double",
                      "description": "The real circulating supply computed based on (total_circulating_supply - total_burnt)",
                      "nullable": true
                    },
                    "tokenWithheldAmount": {
                      "type": "number",
                      "format": "double",
                      "description": "The withheld amount by the withheld authority itself",
                      "nullable": true
                    },
                    "totalWithheldAmount": {
                      "type": "number",
                      "format": "double",
                      "description": "The mint withheld amount - token accounts withheld amount",
                      "nullable": true
                    },
                    "userTotalWithheldAmount": {
                      "type": "number",
                      "format": "double",
                      "description": "The withheld authority total withheld amount",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
                  "required": [
                    "code",
                    "message",
                    "status"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int32",
                      "example": "500",
                      "minimum": 0
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "status": {
                      "type": "string",
                      "example": "500"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/accounts/{hash}/transactions": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Account Transactions",
        "description": "Account Transactions\n\n<h3>Retrieve a list of finalised transactions that the account is involved in.</h3>",
        "operationId": "get_account_transactions",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Account pubkey",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nix9RErnQYXpuf329ntPgSzThogtfeyUempD7zDrnSH"
          },
          {
            "name": "actions",
            "in": "query",
            "description": "Vector of actions to filter",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form"
          },
          {
            "name": "utcFrom",
            "in": "query",
            "description": "The start UTC epoch to query transactions for.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698796800
          },
          {
            "name": "utcTo",
            "in": "query",
            "description": "The end UTC epoch to query transactions for.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698883199
          },
          {
            "name": "inflow",
            "in": "query",
            "description": "Whether the transactions should include inflow movements.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "style": "form"
          },
          {
            "name": "outflow",
            "in": "query",
            "description": "Whether the transactions should include outflow movements.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "style": "form"
          },
          {
            "name": "mint",
            "in": "query",
            "description": "The mint(s) to query transactions for.\n\nMultiple mints can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "mints",
            "in": "query",
            "description": "The mint(s) to query transactions for.\n\nMultiple mints can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "The amount range for selected mints.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698796800
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "The amount range for selected mints.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698883199
          },
          {
            "name": "program",
            "in": "query",
            "description": "The program(s) to query transactions for.\n\nMultiple programs can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "programs",
            "in": "query",
            "description": "The program(s) to query transactions for.\n\nMultiple programs can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of transactions to return per page.\n\nThe default and maximum is 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "maximum": 1000,
              "minimum": 1
            },
            "style": "form"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retreive.\n\nThe default is 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "nullable": true,
              "minimum": 1
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of transactions that the account is involved in"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/v0/accounts/{hash}/transfers": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Account Transfers",
        "description": "Account Transfers\n\n<h3>Retrieve a list of transfers that the account is involved in.</h3>",
        "operationId": "get_account_transfers_v1",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Account pubkey",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nix9RErnQYXpuf329ntPgSzThogtfeyUempD7zDrnSH"
          },
          {
            "name": "utcFrom",
            "in": "query",
            "description": "The start UTC epoch to query transfers for.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698796800
          },
          {
            "name": "utcTo",
            "in": "query",
            "description": "The end UTC epoch to query transfers for.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698883199
          },
          {
            "name": "inflow",
            "in": "query",
            "description": "Whether the transfers should include inflow movements.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "style": "form"
          },
          {
            "name": "outflow",
            "in": "query",
            "description": "Whether the transfers should include outflow movements.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "style": "form"
          },
          {
            "name": "mint",
            "in": "query",
            "description": "The mint(s) to query transfers for.\n\nMultiple mints can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of transfers to return per page.\n\nThe default and maximum is 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "maximum": 100,
              "minimum": 1
            },
            "style": "form"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retreive.\n\nThe default is 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "nullable": true,
              "minimum": 1
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of transfers that the account is involved in"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/v0/accounts/{hash}/transfers/csv": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "operationId": "download_csv_v1",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Account pubkey",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "nix9RErnQYXpuf329ntPgSzThogtfeyUempD7zDrnSH"
          },
          {
            "name": "actions",
            "in": "query",
            "description": "Vector of actions to filter",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form"
          },
          {
            "name": "utcFrom",
            "in": "query",
            "description": "The start UTC epoch to query transactions for.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698796800
          },
          {
            "name": "utcTo",
            "in": "query",
            "description": "The end UTC epoch to query transactions for.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698883199
          },
          {
            "name": "inflow",
            "in": "query",
            "description": "Whether the transactions should include inflow movements.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "style": "form"
          },
          {
            "name": "outflow",
            "in": "query",
            "description": "Whether the transactions should include outflow movements.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "style": "form"
          },
          {
            "name": "mint",
            "in": "query",
            "description": "The mint(s) to query transactions for.\n\nMultiple mints can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "mints",
            "in": "query",
            "description": "The mint(s) to query transactions for.\n\nMultiple mints can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "The amount range for selected mints.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698796800
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "The amount range for selected mints.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            },
            "style": "form",
            "example": 1698883199
          },
          {
            "name": "program",
            "in": "query",
            "description": "The program(s) to query transactions for.\n\nMultiple programs can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "programs",
            "in": "query",
            "description": "The program(s) to query transactions for.\n\nMultiple programs can be specified by comma-separating them.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "style": "form",
            "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v,DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of transactions to return per page.\n\nThe default and maximum is 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "nullable": true,
              "maximum": 1000,
              "minimum": 1
            },
            "style": "form"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retreive.\n\nThe default is 1.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1,
              "nullable": true,
              "minimum": 1
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of transactions that the account is involved in"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/v0/transfers": {
      "post": {
        "tags": [
          "Transfers"
        ],
        "summary": "Multiple Transaction Transfers",
        "description": "Multiple Transaction Transfers\n<h3>Retrieve a list of transfers for a given list of transaction hashes.</h3>",
        "operationId": "post_transfers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "transactionHashes"
                ],
                "properties": {
                  "transactionHashes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of transaction hashes to query for",
                    "example": [
                      "112YB4bgpRpXpjea39vxY2bAgeDTkSB5RUjryp7dJitMao3WKHbMr2ACWfsZrWyCERGypQn3Yi5Xmao5JZwcYt5",
                      "112TZTmNNcLBMxn3oCBAnh59JUeHDU6QfqHWGsfEoVKrpmYtAA37MoPpYWnkHrjtvgfg7NTRj6x7KiCY5cdyKEf"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved transfers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "transactionHash",
                      "data"
                    ],
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "instructionIndex",
                            "innerInstructionIndex",
                            "action",
                            "status",
                            "token",
                            "amount",
                            "timestamp"
                          ],
                          "properties": {
                            "action": {
                              "type": "string",
                              "description": "The transfer action identified by the SolanaFM team"
                            },
                            "amount": {
                              "type": "integer",
                              "format": "int64",
                              "description": "The amount that is being transferred",
                              "minimum": 0
                            },
                            "destination": {
                              "type": "string",
                              "description": "The destination account hash of the fund",
                              "nullable": true
                            },
                            "destinationAssociation": {
                              "type": "string",
                              "description": "The associated destination account hash",
                              "nullable": true
                            },
                            "innerInstructionIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The inner instruction index of this movement"
                            },
                            "instructionIndex": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The instruction index of this movement"
                            },
                            "source": {
                              "type": "string",
                              "description": "The source account hash of the funds",
                              "nullable": true
                            },
                            "sourceAssociation": {
                              "type": "string",
                              "description": "The associated source account hash",
                              "nullable": true
                            },
                            "status": {
                              "type": "string",
                              "description": "The status of the transfer"
                            },
                            "timestamp": {
                              "type": "integer",
                              "format": "int64",
                              "description": "The timestamp of the transaction",
                              "minimum": 0
                            },
                            "token": {
                              "type": "string",
                              "description": "The token hash involved in the movement"
                            }
                          }
                        },
                        "description": "A list of all the individual fund movements"
                      },
                      "transactionHash": {
                        "type": "string",
                        "description": "The transaction hash of the transfer"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v0/transfers/{hash}": {
      "get": {
        "tags": [
          "Transfers"
        ],
        "summary": "Transfer Transactions",
        "description": "Transfer Transactions\n\n<h3>Retrieve a list of transfers for a given transaction hash.</h3>",
        "operationId": "get_transfers",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Transaction signature",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "XYTAd8UQSiiuyD4FCFFxBcxpkFUWiJJBXpV5uSzZ4UthJKB1zCHtjzvwZkvvJDR12C4yQkQdequ2NkdXXUUmzJw"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transfer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "transactionHash",
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "instructionIndex",
                          "innerInstructionIndex",
                          "action",
                          "status",
                          "token",
                          "amount",
                          "timestamp"
                        ],
                        "properties": {
                          "action": {
                            "type": "string",
                            "description": "The transfer action identified by the SolanaFM team"
                          },
                          "amount": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The amount that is being transferred",
                            "minimum": 0
                          },
                          "destination": {
                            "type": "string",
                            "description": "The destination account hash of the fund",
                            "nullable": true
                          },
                          "destinationAssociation": {
                            "type": "string",
                            "description": "The associated destination account hash",
                            "nullable": true
                          },
                          "innerInstructionIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The inner instruction index of this movement"
                          },
                          "instructionIndex": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The instruction index of this movement"
                          },
                          "source": {
                            "type": "string",
                            "description": "The source account hash of the funds",
                            "nullable": true
                          },
                          "sourceAssociation": {
                            "type": "string",
                            "description": "The associated source account hash",
                            "nullable": true
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the transfer"
                          },
                          "timestamp": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The timestamp of the transaction",
                            "minimum": 0
                          },
                          "token": {
                            "type": "string",
                            "description": "The token hash involved in the movement"
                          }
                        }
                      },
                      "description": "A list of all the individual fund movements"
                    },
                    "transactionHash": {
                      "type": "string",
                      "description": "The transaction hash of the transfer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "required": [
          "lamports",
          "data",
          "owner",
          "executable",
          "rentEpoch"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "object",
                "required": [
                  "info",
                  "account_type"
                ],
                "properties": {
                  "account_type": {
                    "type": "string"
                  },
                  "info": {}
                }
              }
            ]
          },
          "executable": {
            "type": "boolean",
            "description": "Indicates whether the account is an executable account or not"
          },
          "lamports": {
            "type": "integer",
            "format": "int64",
            "description": "Amount of lamports in the account",
            "minimum": 0
          },
          "owner": {
            "type": "string",
            "description": "Owner of the account"
          },
          "rentEpoch": {
            "type": "integer",
            "format": "int64",
            "description": "Rent epoch of the account",
            "minimum": 0
          }
        }
      },
      "AccountDataEnum": {
        "oneOf": [
          {
            "type": "string",
            "format": "binary"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "object",
            "required": [
              "info",
              "account_type"
            ],
            "properties": {
              "account_type": {
                "type": "string"
              },
              "info": {}
            }
          }
        ]
      },
      "AccountInfo": {
        "type": "object",
        "required": [
          "friendlyName",
          "abbreviation",
          "category",
          "network",
          "tags"
        ],
        "properties": {
          "abbreviation": {
            "type": "string",
            "description": "Account abbreviation (e.g. USDC)"
          },
          "category": {
            "type": "string",
            "description": "Category of the Account (e.g. Tokens)"
          },
          "flag": {
            "type": "string",
            "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
            "nullable": true
          },
          "friendlyName": {
            "type": "string",
            "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
          },
          "logoURI": {
            "type": "string",
            "description": "Image url for the account",
            "nullable": true
          },
          "network": {
            "type": "string",
            "description": "(e.g. mainnet/devnet)"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "SolanaFM labelled tags"
          },
          "voteKey": {
            "type": "string",
            "description": "Vote key only exists for validator accounts",
            "nullable": true
          }
        }
      },
      "AccountTxFeesViewModel": {
        "type": "object",
        "required": [
          "tx_fees",
          "time"
        ],
        "properties": {
          "time": {
            "type": "string"
          },
          "tx_fees": {
            "type": "integer",
            "format": "int64",
            "description": "Transaction Fees accrued for the day"
          }
        }
      },
      "ActiveUserEnum": {
        "type": "string",
        "enum": [
          "ACCOUNTS",
          "OWNERS"
        ]
      },
      "AllNameServiceBonfidaDomain": {
        "type": "object",
        "required": [
          "name",
          "nameServiceAccount"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the domain"
          },
          "nameServiceAccount": {
            "type": "string",
            "description": "The name service account hash of the domain"
          }
        }
      },
      "AllNameServiceBonfidaVM": {
        "type": "object",
        "required": [
          "owner",
          "domains"
        ],
        "properties": {
          "domains": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "nameServiceAccount"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the domain"
                },
                "nameServiceAccount": {
                  "type": "string",
                  "description": "The name service account hash of the domain"
                }
              }
            },
            "description": "A list of Bonfida Domain Objects"
          },
          "owner": {
            "type": "string",
            "description": "The owner hash of the domain/subdomain account"
          }
        }
      },
      "AllNameServiceViewModel": {
        "type": "object",
        "required": [
          "bonfidaDomains",
          "ansDomains"
        ],
        "properties": {
          "ansDomains": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "nameAccount",
                "domainName",
                "owner"
              ],
              "properties": {
                "domainName": {
                  "type": "string"
                },
                "nameAccount": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                }
              }
            }
          },
          "bonfidaDomains": {
            "type": "object",
            "required": [
              "owner",
              "domains"
            ],
            "properties": {
              "domains": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name",
                    "nameServiceAccount"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the domain"
                    },
                    "nameServiceAccount": {
                      "type": "string",
                      "description": "The name service account hash of the domain"
                    }
                  }
                },
                "description": "A list of Bonfida Domain Objects"
              },
              "owner": {
                "type": "string",
                "description": "The owner hash of the domain/subdomain account"
              }
            }
          }
        }
      },
      "AnsDomainsViewModel": {
        "type": "object",
        "required": [
          "nameAccount",
          "domainName",
          "owner"
        ],
        "properties": {
          "domainName": {
            "type": "string"
          },
          "nameAccount": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "description": "This is where we have our API error response struct\nFeel free to design your own API Error response\nFor this example I am referencing Google's JSON API error response\nhttps://cloud.google.com/apis/design/errors",
        "required": [
          "code",
          "message",
          "status"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "example": "500",
            "minimum": 0
          },
          "message": {
            "type": "string",
            "example": "Internal Server Error"
          },
          "status": {
            "type": "string",
            "example": "500"
          }
        }
      },
      "Asn": {
        "type": "object",
        "required": [
          "name",
          "code",
          "id"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "description": "The code of this ASN",
            "example": 16509
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of this ASN",
            "example": 270
          },
          "name": {
            "type": "string",
            "description": "The name of this ASN",
            "example": "AMAZON-02"
          }
        }
      },
      "AvailableIdl": {
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "BlockData": {
        "type": "object",
        "required": [
          "epoch",
          "previousHash",
          "producer",
          "hash",
          "parentNumber",
          "number",
          "dataSize",
          "numberOfTransactions",
          "successfulTransactions",
          "voteTransactions",
          "totalTxFees",
          "numberOfRewards",
          "totalRewardAmount",
          "totalComputeUnitsConsumed",
          "totalComputeUnitsLimit",
          "blockTime"
        ],
        "properties": {
          "blockTime": {
            "type": "integer",
            "format": "int64",
            "description": "The time that this block is produced",
            "minimum": 0
          },
          "dataSize": {
            "type": "integer",
            "format": "int64",
            "description": "The data size of this block",
            "minimum": 0
          },
          "epoch": {
            "type": "integer",
            "format": "int32",
            "description": "The epoch that this block belongs to",
            "minimum": 0
          },
          "hash": {
            "type": "string",
            "description": "The block hash"
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "The block number",
            "minimum": 0
          },
          "numberOfRewards": {
            "type": "integer",
            "format": "int32",
            "description": "The number of rewards being issued",
            "minimum": 0
          },
          "numberOfTransactions": {
            "type": "integer",
            "format": "int32",
            "description": "The number of transactions produced in this block",
            "minimum": 0
          },
          "parentNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The parent's block number",
            "minimum": 0
          },
          "previousHash": {
            "type": "string",
            "description": "The previous block's block hash"
          },
          "producer": {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "String"
                ],
                "properties": {
                  "String": {
                    "type": "string",
                    "description": "The block producer account hash"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "Account"
                ],
                "properties": {
                  "Account": {
                    "type": "object",
                    "required": [
                      "accountHash"
                    ],
                    "properties": {
                      "accountHash": {
                        "type": "string",
                        "description": "The pubkey of the account returned"
                      },
                      "data": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "friendlyName",
                              "abbreviation",
                              "category",
                              "network",
                              "tags"
                            ],
                            "properties": {
                              "abbreviation": {
                                "type": "string",
                                "description": "Account abbreviation (e.g. USDC)"
                              },
                              "category": {
                                "type": "string",
                                "description": "Category of the Account (e.g. Tokens)"
                              },
                              "flag": {
                                "type": "string",
                                "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                                "nullable": true
                              },
                              "friendlyName": {
                                "type": "string",
                                "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                              },
                              "logoURI": {
                                "type": "string",
                                "description": "Image url for the account",
                                "nullable": true
                              },
                              "network": {
                                "type": "string",
                                "description": "(e.g. mainnet/devnet)"
                              },
                              "tags": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "SolanaFM labelled tags"
                              },
                              "voteKey": {
                                "type": "string",
                                "description": "Vote key only exists for validator accounts",
                                "nullable": true
                              }
                            }
                          }
                        ],
                        "nullable": true
                      },
                      "onchain": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "lamports",
                              "data",
                              "owner",
                              "executable",
                              "rentEpoch"
                            ],
                            "properties": {
                              "data": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "format": "binary"
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "info",
                                      "account_type"
                                    ],
                                    "properties": {
                                      "account_type": {
                                        "type": "string"
                                      },
                                      "info": {}
                                    }
                                  }
                                ]
                              },
                              "executable": {
                                "type": "boolean",
                                "description": "Indicates whether the account is an executable account or not"
                              },
                              "lamports": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Amount of lamports in the account",
                                "minimum": 0
                              },
                              "owner": {
                                "type": "string",
                                "description": "Owner of the account"
                              },
                              "rentEpoch": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Rent epoch of the account",
                                "minimum": 0
                              }
                            }
                          }
                        ],
                        "nullable": true
                      }
                    }
                  }
                }
              }
            ]
          },
          "successfulTransactions": {
            "type": "integer",
            "format": "int32",
            "description": "The number of successful transactions in this block",
            "minimum": 0
          },
          "totalComputeUnitsConsumed": {
            "type": "integer",
            "format": "int64",
            "description": "The total compute units consumed producing this block",
            "minimum": 0
          },
          "totalComputeUnitsLimit": {
            "type": "integer",
            "format": "int64",
            "description": "The total compute limits indicated for this block",
            "minimum": 0
          },
          "totalRewardAmount": {
            "type": "integer",
            "format": "int64",
            "description": "The total reward amount",
            "minimum": 0
          },
          "totalTxFees": {
            "type": "integer",
            "format": "int64",
            "description": "The total transaction fees collected in the block",
            "minimum": 0
          },
          "voteTransactions": {
            "type": "integer",
            "format": "int32",
            "description": "The number of vote transactions in this blocl",
            "minimum": 0
          }
        }
      },
      "BlockPagination": {
        "type": "object",
        "properties": {
          "next": {
            "type": "integer",
            "format": "int64",
            "description": "The next cursor pointer",
            "nullable": true,
            "minimum": 0
          },
          "previous": {
            "type": "integer",
            "format": "int64",
            "description": "The previous cursor pointer",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "BlockViewModel": {
        "type": "object",
        "required": [
          "blockNumber",
          "data"
        ],
        "properties": {
          "blockNumber": {
            "type": "integer",
            "format": "int64",
            "description": "The block number retrieved",
            "minimum": 0
          },
          "data": {
            "type": "object",
            "required": [
              "epoch",
              "previousHash",
              "producer",
              "hash",
              "parentNumber",
              "number",
              "dataSize",
              "numberOfTransactions",
              "successfulTransactions",
              "voteTransactions",
              "totalTxFees",
              "numberOfRewards",
              "totalRewardAmount",
              "totalComputeUnitsConsumed",
              "totalComputeUnitsLimit",
              "blockTime"
            ],
            "properties": {
              "blockTime": {
                "type": "integer",
                "format": "int64",
                "description": "The time that this block is produced",
                "minimum": 0
              },
              "dataSize": {
                "type": "integer",
                "format": "int64",
                "description": "The data size of this block",
                "minimum": 0
              },
              "epoch": {
                "type": "integer",
                "format": "int32",
                "description": "The epoch that this block belongs to",
                "minimum": 0
              },
              "hash": {
                "type": "string",
                "description": "The block hash"
              },
              "number": {
                "type": "integer",
                "format": "int64",
                "description": "The block number",
                "minimum": 0
              },
              "numberOfRewards": {
                "type": "integer",
                "format": "int32",
                "description": "The number of rewards being issued",
                "minimum": 0
              },
              "numberOfTransactions": {
                "type": "integer",
                "format": "int32",
                "description": "The number of transactions produced in this block",
                "minimum": 0
              },
              "parentNumber": {
                "type": "integer",
                "format": "int64",
                "description": "The parent's block number",
                "minimum": 0
              },
              "previousHash": {
                "type": "string",
                "description": "The previous block's block hash"
              },
              "producer": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "String"
                    ],
                    "properties": {
                      "String": {
                        "type": "string",
                        "description": "The block producer account hash"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "Account"
                    ],
                    "properties": {
                      "Account": {
                        "type": "object",
                        "required": [
                          "accountHash"
                        ],
                        "properties": {
                          "accountHash": {
                            "type": "string",
                            "description": "The pubkey of the account returned"
                          },
                          "data": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "friendlyName",
                                  "abbreviation",
                                  "category",
                                  "network",
                                  "tags"
                                ],
                                "properties": {
                                  "abbreviation": {
                                    "type": "string",
                                    "description": "Account abbreviation (e.g. USDC)"
                                  },
                                  "category": {
                                    "type": "string",
                                    "description": "Category of the Account (e.g. Tokens)"
                                  },
                                  "flag": {
                                    "type": "string",
                                    "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                                    "nullable": true
                                  },
                                  "friendlyName": {
                                    "type": "string",
                                    "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                                  },
                                  "logoURI": {
                                    "type": "string",
                                    "description": "Image url for the account",
                                    "nullable": true
                                  },
                                  "network": {
                                    "type": "string",
                                    "description": "(e.g. mainnet/devnet)"
                                  },
                                  "tags": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "SolanaFM labelled tags"
                                  },
                                  "voteKey": {
                                    "type": "string",
                                    "description": "Vote key only exists for validator accounts",
                                    "nullable": true
                                  }
                                }
                              }
                            ],
                            "nullable": true
                          },
                          "onchain": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "lamports",
                                  "data",
                                  "owner",
                                  "executable",
                                  "rentEpoch"
                                ],
                                "properties": {
                                  "data": {
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "format": "binary"
                                      },
                                      {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "info",
                                          "account_type"
                                        ],
                                        "properties": {
                                          "account_type": {
                                            "type": "string"
                                          },
                                          "info": {}
                                        }
                                      }
                                    ]
                                  },
                                  "executable": {
                                    "type": "boolean",
                                    "description": "Indicates whether the account is an executable account or not"
                                  },
                                  "lamports": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "Amount of lamports in the account",
                                    "minimum": 0
                                  },
                                  "owner": {
                                    "type": "string",
                                    "description": "Owner of the account"
                                  },
                                  "rentEpoch": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "Rent epoch of the account",
                                    "minimum": 0
                                  }
                                }
                              }
                            ],
                            "nullable": true
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "successfulTransactions": {
                "type": "integer",
                "format": "int32",
                "description": "The number of successful transactions in this block",
                "minimum": 0
              },
              "totalComputeUnitsConsumed": {
                "type": "integer",
                "format": "int64",
                "description": "The total compute units consumed producing this block",
                "minimum": 0
              },
              "totalComputeUnitsLimit": {
                "type": "integer",
                "format": "int64",
                "description": "The total compute limits indicated for this block",
                "minimum": 0
              },
              "totalRewardAmount": {
                "type": "integer",
                "format": "int64",
                "description": "The total reward amount",
                "minimum": 0
              },
              "totalTxFees": {
                "type": "integer",
                "format": "int64",
                "description": "The total transaction fees collected in the block",
                "minimum": 0
              },
              "voteTransactions": {
                "type": "integer",
                "format": "int32",
                "description": "The number of vote transactions in this blocl",
                "minimum": 0
              }
            }
          }
        }
      },
      "CountryValidatorsViewModel": {
        "type": "object",
        "required": [
          "countryCode",
          "validators"
        ],
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "The iso/country code of the country where the validator is located",
            "example": "JP"
          },
          "validators": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "account",
                "voteAccount",
                "network",
                "name",
                "softwareVersion",
                "commission",
                "ip",
                "lastVote",
                "stake",
                "stakeInSol",
                "jito",
                "delinquent"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "description": "The public key of the validator",
                  "example": "XkCriyrNwS3G4rzAXtG5B1nnvb5Ka1JtCku93VqeKAr"
                },
                "asnCode": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The asn code related to this validator",
                  "example": "16509",
                  "nullable": true
                },
                "asnId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The id of the asn related to this validator",
                  "example": "270",
                  "nullable": true
                },
                "asnName": {
                  "type": "string",
                  "description": "The asn name related to this validator",
                  "example": "AMAZON-02",
                  "nullable": true
                },
                "city": {
                  "type": "string",
                  "description": "The city where the validator is located",
                  "example": "Tokyo",
                  "nullable": true
                },
                "commission": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The commission of the validator",
                  "example": 8
                },
                "country": {
                  "type": "string",
                  "description": "The country where the validator is located",
                  "example": "Japan",
                  "nullable": true
                },
                "delinquent": {
                  "type": "boolean",
                  "description": "Whether the validator is delinquent",
                  "example": 1
                },
                "historicalSkipRate": {
                  "type": "number",
                  "format": "double",
                  "description": "The historical skip rate of this validator",
                  "example": 1,
                  "nullable": true
                },
                "ip": {
                  "type": "string",
                  "description": "The IP address of the validator",
                  "example": "35.77.221.213"
                },
                "isoCode": {
                  "type": "string",
                  "description": "The iso/country code of the country where the validator is located",
                  "example": "JP",
                  "nullable": true
                },
                "jito": {
                  "type": "boolean",
                  "description": "Whether the validator is using JITO",
                  "example": false
                },
                "keybaseUsername": {
                  "type": "string",
                  "description": "The keybase username of the validator",
                  "example": "coinbasecloud",
                  "nullable": true
                },
                "lastVote": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The most recent slot voted on by this vote account (Updated every 24hrs)",
                  "example": 209333679
                },
                "name": {
                  "type": "string",
                  "description": "The name of the validator",
                  "example": "Coinbase Cloud"
                },
                "network": {
                  "type": "string",
                  "description": "The network of the validator",
                  "example": "mainnet"
                },
                "skipRate": {
                  "type": "number",
                  "format": "double",
                  "description": "The skip rate from the epoch in skip_rate_epoch",
                  "example": 1,
                  "nullable": true
                },
                "skipRateEpoch": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The latest epoch with skip rate data",
                  "example": 1,
                  "nullable": true
                },
                "softwareVersion": {
                  "type": "string",
                  "description": "The software version of the validator",
                  "example": "1.14.20"
                },
                "stake": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The amount staked in lamports",
                  "example": 1
                },
                "stakeInSol": {
                  "type": "number",
                  "format": "double",
                  "description": "The amount staked in SOL",
                  "example": 1
                },
                "validatorDetails": {
                  "type": "string",
                  "description": "The additional details of the validator",
                  "example": "Coinbase Cloud provides secure and reliable blockchain infrastructure and APIs. Stake your crypto to our enterprise-grade validators.",
                  "nullable": true
                },
                "voteAccount": {
                  "type": "string",
                  "description": "The vote account of the validator",
                  "example": "beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar"
                },
                "website": {
                  "type": "string",
                  "description": "The website for the validator",
                  "example": "https://www.coinbase.com/cloud",
                  "nullable": true
                }
              }
            },
            "description": "The validators located within this country"
          }
        }
      },
      "DailyActiveUsersViewModel": {
        "type": "object",
        "required": [
          "date",
          "activeUsers"
        ],
        "properties": {
          "activeUsers": {
            "type": "integer",
            "format": "int64",
            "description": "The number of active users accumulated",
            "minimum": 0
          },
          "date": {
            "type": "string",
            "description": "The date of the data retrieved"
          }
        }
      },
      "DailyRewardsViewModel": {
        "type": "object",
        "required": [
          "date",
          "rewards"
        ],
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of the data retrieved"
          },
          "rewards": {
            "type": "number",
            "format": "double",
            "description": "The rewards amount accumulated"
          }
        }
      },
      "DailyTxFeesViewModel": {
        "type": "object",
        "required": [
          "date",
          "totalTxFees"
        ],
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of the data retrieved"
          },
          "totalTxFees": {
            "type": "integer",
            "description": "The total transaction fees accumulated",
            "minimum": 0
          }
        }
      },
      "DelegationExternalView": {
        "type": "object",
        "required": [
          "voter_pubkey",
          "post_balance_without_rent_exempt",
          "effective_stake",
          "activation_epoch",
          "deactivation_epoch",
          "warmup_cooldown_rate"
        ],
        "properties": {
          "activation_epoch": {
            "type": "object",
            "required": [
              "epoch_number"
            ],
            "properties": {
              "epoch_number": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "deactivation_epoch": {
            "type": "object",
            "required": [
              "epoch_number"
            ],
            "properties": {
              "epoch_number": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "effective_stake": {
            "type": "integer",
            "format": "int64",
            "description": "activated stake amount, set at delegate() time without rent_exempt",
            "minimum": 0
          },
          "post_balance_without_rent_exempt": {
            "type": "integer",
            "format": "int64",
            "description": "Account balance in lamports",
            "minimum": 0
          },
          "voter_pubkey": {
            "type": "string",
            "description": "to whom the stake is delegated"
          },
          "warmup_cooldown_rate": {
            "type": "number",
            "format": "double",
            "description": "how much stake we can activate per-epoch as a fraction of currently effective stake"
          }
        }
      },
      "DomainNameSearch": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "categories",
              "tags"
            ],
            "properties": {
              "abbreviation": {
                "type": "string",
                "nullable": true
              },
              "categories": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "hash": {
                "type": "string",
                "nullable": true
              },
              "logoUrl": {
                "type": "string",
                "nullable": true
              },
              "name": {
                "type": "string",
                "nullable": true
              },
              "owner": {
                "type": "string",
                "nullable": true
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": "string"
          }
        ]
      },
      "DomainSearchWrapper": {
        "type": "object",
        "required": [
          "domainName",
          "account"
        ],
        "properties": {
          "account": {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "categories",
                  "tags"
                ],
                "properties": {
                  "abbreviation": {
                    "type": "string",
                    "nullable": true
                  },
                  "categories": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "hash": {
                    "type": "string",
                    "nullable": true
                  },
                  "logoUrl": {
                    "type": "string",
                    "nullable": true
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "owner": {
                    "type": "string",
                    "nullable": true
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "domainName": {
            "type": "string"
          }
        }
      },
      "DomainViewModel": {
        "type": "object",
        "required": [
          "name",
          "nameServiceAccount",
          "subdomains"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the domain"
          },
          "nameServiceAccount": {
            "type": "string",
            "description": "The name service account hash of the domain"
          },
          "subdomains": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "subdomainHash"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the subdomain"
                },
                "subdomainHash": {
                  "type": "string",
                  "description": "The subdomain account hash"
                }
              }
            },
            "description": "A list of subdomains that belongs to this current domain"
          }
        }
      },
      "Epoch": {
        "type": "object",
        "required": [
          "epoch_number"
        ],
        "properties": {
          "epoch_number": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FavouriteDomainViewModel": {
        "type": "object",
        "required": [
          "name",
          "nameServiceAccount",
          "owner",
          "favourite"
        ],
        "properties": {
          "favourite": {
            "type": "boolean",
            "description": "Indicates whether the domain is set as favourite"
          },
          "name": {
            "type": "string",
            "description": "The domain name"
          },
          "nameServiceAccount": {
            "type": "string",
            "description": "The account hash of the domain"
          },
          "owner": {
            "type": "string",
            "description": "The owner's hash of the domain"
          }
        }
      },
      "GetAccountViewModel": {
        "type": "object",
        "required": [
          "accountHash",
          "data"
        ],
        "properties": {
          "accountHash": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "friendlyName",
              "abbreviation",
              "category",
              "network",
              "tags"
            ],
            "properties": {
              "abbreviation": {
                "type": "string",
                "description": "Account abbreviation (e.g. USDC)"
              },
              "category": {
                "type": "string",
                "description": "Category of the Account (e.g. Tokens)"
              },
              "flag": {
                "type": "string",
                "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                "nullable": true
              },
              "friendlyName": {
                "type": "string",
                "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
              },
              "logoURI": {
                "type": "string",
                "description": "Image url for the account",
                "nullable": true
              },
              "network": {
                "type": "string",
                "description": "(e.g. mainnet/devnet)"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "SolanaFM labelled tags"
              },
              "voteKey": {
                "type": "string",
                "description": "Vote key only exists for validator accounts",
                "nullable": true
              }
            }
          }
        }
      },
      "GetBlockPageRequestQuery": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Cursor to the next/previous page.\nWhen not provided, latest blocks will be returned",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "description": "Defines the number of blocks returned in a page.\nDefaults to 50 when not provided",
            "nullable": true,
            "minimum": 0
          },
          "paginationType": {
            "type": "string",
            "description": "Sets the pagination type (either `blockNumber` or `blockTime`)",
            "nullable": true
          },
          "reverse": {
            "type": "boolean",
            "description": "Only accepts (True/False).\nIndicates the pagination order of the block.\nIf set true, returns an ascending order from older blocks to newer blocks.\nIf set false, returns a descending order from newer blocks to older blocks.",
            "nullable": true
          }
        }
      },
      "GetBlocksPaginationViewModel": {
        "type": "object",
        "required": [
          "data",
          "pagination"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "blockNumber",
                "data"
              ],
              "properties": {
                "blockNumber": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The block number retrieved",
                  "minimum": 0
                },
                "data": {
                  "type": "object",
                  "required": [
                    "epoch",
                    "previousHash",
                    "producer",
                    "hash",
                    "parentNumber",
                    "number",
                    "dataSize",
                    "numberOfTransactions",
                    "successfulTransactions",
                    "voteTransactions",
                    "totalTxFees",
                    "numberOfRewards",
                    "totalRewardAmount",
                    "totalComputeUnitsConsumed",
                    "totalComputeUnitsLimit",
                    "blockTime"
                  ],
                  "properties": {
                    "blockTime": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The time that this block is produced",
                      "minimum": 0
                    },
                    "dataSize": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The data size of this block",
                      "minimum": 0
                    },
                    "epoch": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The epoch that this block belongs to",
                      "minimum": 0
                    },
                    "hash": {
                      "type": "string",
                      "description": "The block hash"
                    },
                    "number": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The block number",
                      "minimum": 0
                    },
                    "numberOfRewards": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of rewards being issued",
                      "minimum": 0
                    },
                    "numberOfTransactions": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of transactions produced in this block",
                      "minimum": 0
                    },
                    "parentNumber": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The parent's block number",
                      "minimum": 0
                    },
                    "previousHash": {
                      "type": "string",
                      "description": "The previous block's block hash"
                    },
                    "producer": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "String"
                          ],
                          "properties": {
                            "String": {
                              "type": "string",
                              "description": "The block producer account hash"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "Account"
                          ],
                          "properties": {
                            "Account": {
                              "type": "object",
                              "required": [
                                "accountHash"
                              ],
                              "properties": {
                                "accountHash": {
                                  "type": "string",
                                  "description": "The pubkey of the account returned"
                                },
                                "data": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "required": [
                                        "friendlyName",
                                        "abbreviation",
                                        "category",
                                        "network",
                                        "tags"
                                      ],
                                      "properties": {
                                        "abbreviation": {
                                          "type": "string",
                                          "description": "Account abbreviation (e.g. USDC)"
                                        },
                                        "category": {
                                          "type": "string",
                                          "description": "Category of the Account (e.g. Tokens)"
                                        },
                                        "flag": {
                                          "type": "string",
                                          "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                                          "nullable": true
                                        },
                                        "friendlyName": {
                                          "type": "string",
                                          "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                                        },
                                        "logoURI": {
                                          "type": "string",
                                          "description": "Image url for the account",
                                          "nullable": true
                                        },
                                        "network": {
                                          "type": "string",
                                          "description": "(e.g. mainnet/devnet)"
                                        },
                                        "tags": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "description": "SolanaFM labelled tags"
                                        },
                                        "voteKey": {
                                          "type": "string",
                                          "description": "Vote key only exists for validator accounts",
                                          "nullable": true
                                        }
                                      }
                                    }
                                  ],
                                  "nullable": true
                                },
                                "onchain": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "required": [
                                        "lamports",
                                        "data",
                                        "owner",
                                        "executable",
                                        "rentEpoch"
                                      ],
                                      "properties": {
                                        "data": {
                                          "oneOf": [
                                            {
                                              "type": "string",
                                              "format": "binary"
                                            },
                                            {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "required": [
                                                "info",
                                                "account_type"
                                              ],
                                              "properties": {
                                                "account_type": {
                                                  "type": "string"
                                                },
                                                "info": {}
                                              }
                                            }
                                          ]
                                        },
                                        "executable": {
                                          "type": "boolean",
                                          "description": "Indicates whether the account is an executable account or not"
                                        },
                                        "lamports": {
                                          "type": "integer",
                                          "format": "int64",
                                          "description": "Amount of lamports in the account",
                                          "minimum": 0
                                        },
                                        "owner": {
                                          "type": "string",
                                          "description": "Owner of the account"
                                        },
                                        "rentEpoch": {
                                          "type": "integer",
                                          "format": "int64",
                                          "description": "Rent epoch of the account",
                                          "minimum": 0
                                        }
                                      }
                                    }
                                  ],
                                  "nullable": true
                                }
                              }
                            }
                          }
                        }
                      ]
                    },
                    "successfulTransactions": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of successful transactions in this block",
                      "minimum": 0
                    },
                    "totalComputeUnitsConsumed": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The total compute units consumed producing this block",
                      "minimum": 0
                    },
                    "totalComputeUnitsLimit": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The total compute limits indicated for this block",
                      "minimum": 0
                    },
                    "totalRewardAmount": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The total reward amount",
                      "minimum": 0
                    },
                    "totalTxFees": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The total transaction fees collected in the block",
                      "minimum": 0
                    },
                    "voteTransactions": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of vote transactions in this blocl",
                      "minimum": 0
                    }
                  }
                }
              }
            },
            "description": "A list of block data to be returned"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next": {
                "type": "integer",
                "format": "int64",
                "description": "The next cursor pointer",
                "nullable": true,
                "minimum": 0
              },
              "previous": {
                "type": "integer",
                "format": "int64",
                "description": "The previous cursor pointer",
                "nullable": true,
                "minimum": 0
              }
            }
          }
        }
      },
      "GetDomainsAndSubViewModel": {
        "type": "object",
        "required": [
          "owner",
          "domains"
        ],
        "properties": {
          "domains": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "nameServiceAccount",
                "subdomains"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the domain"
                },
                "nameServiceAccount": {
                  "type": "string",
                  "description": "The name service account hash of the domain"
                },
                "subdomains": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name",
                      "subdomainHash"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the subdomain"
                      },
                      "subdomainHash": {
                        "type": "string",
                        "description": "The subdomain account hash"
                      }
                    }
                  },
                  "description": "A list of subdomains that belongs to this current domain"
                }
              }
            },
            "description": "A list of Bonfida Domain Objects"
          },
          "owner": {
            "type": "string",
            "description": "The owner hash of the domain/subdomain account"
          }
        }
      },
      "GetFavouriteDomainsViewModel": {
        "type": "object",
        "required": [
          "domains"
        ],
        "properties": {
          "domains": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "nameServiceAccount",
                "owner",
                "favourite"
              ],
              "properties": {
                "favourite": {
                  "type": "boolean",
                  "description": "Indicates whether the domain is set as favourite"
                },
                "name": {
                  "type": "string",
                  "description": "The domain name"
                },
                "nameServiceAccount": {
                  "type": "string",
                  "description": "The account hash of the domain"
                },
                "owner": {
                  "type": "string",
                  "description": "The owner's hash of the domain"
                }
              }
            },
            "description": "A list of favoutire domains"
          }
        }
      },
      "GetIdlSlotDeployedViewModel": {
        "type": "object",
        "required": [
          "hash",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "idl_link": {
                  "type": "string",
                  "description": "The link to download the idl",
                  "nullable": true
                },
                "slot_deployed": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The slot that the IDL is deployed on-chain",
                  "nullable": true,
                  "minimum": 0
                }
              }
            },
            "description": "A list of the deployed IDL versions"
          },
          "hash": {
            "type": "string",
            "description": "The program hash of the IDL"
          }
        }
      },
      "GetProgramsMetaPageViewModel": {
        "type": "object",
        "required": [
          "data",
          "pagination"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "description": "This Structure is used for displaying idl metadata (use consuming API)",
                  "properties": {
                    "has_accounts": {
                      "type": "boolean",
                      "description": "Indicates if an IDL has accounts embedded or not",
                      "nullable": true
                    },
                    "has_events": {
                      "type": "boolean",
                      "description": "Indicates if an IDL has events embedded or not",
                      "nullable": true
                    },
                    "idl": {
                      "description": "The IDL JSON object",
                      "nullable": true
                    },
                    "idl_link": {
                      "type": "string",
                      "description": "The link to the IDL",
                      "nullable": true
                    },
                    "idl_name": {
                      "type": "string",
                      "description": "The name of the IDL",
                      "nullable": true
                    },
                    "idl_type": {
                      "type": "string",
                      "description": "The type of IDL (e.g. shank/anchor)",
                      "nullable": true
                    },
                    "idl_version": {
                      "type": "string",
                      "description": "The IDL version",
                      "nullable": true
                    },
                    "slot_deployed": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Deployed slot version of the IDL",
                      "nullable": true,
                      "minimum": 0
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "program_id"
                  ],
                  "properties": {
                    "program_id": {
                      "type": "string",
                      "description": "The program id of the IDL"
                    }
                  }
                }
              ]
            },
            "description": "A list of program IDLs"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "The next cursor pointer",
                "nullable": true
              }
            }
          }
        }
      },
      "GetUserTokenAccountsParams": {
        "type": "object",
        "properties": {
          "includeSolBalance": {
            "type": "boolean",
            "description": "Optional parameter to include sol balance of the main wallet",
            "nullable": true
          },
          "tokenHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of token mints to filter the token accounts by",
            "nullable": true
          }
        }
      },
      "HydrationRequestBody": {
        "type": "object",
        "required": [
          "accountHash"
        ],
        "properties": {
          "accountHash": {
            "type": "boolean",
            "description": "(true/false) to include hydration of account info in the response"
          }
        }
      },
      "IdlMetaExternalView": {
        "type": "object",
        "description": "This Structure is used for displaying idl metadata (use consuming API)",
        "properties": {
          "has_accounts": {
            "type": "boolean",
            "description": "Indicates if an IDL has accounts embedded or not",
            "nullable": true
          },
          "has_events": {
            "type": "boolean",
            "description": "Indicates if an IDL has events embedded or not",
            "nullable": true
          },
          "idl": {
            "description": "The IDL JSON object",
            "nullable": true
          },
          "idl_link": {
            "type": "string",
            "description": "The link to the IDL",
            "nullable": true
          },
          "idl_name": {
            "type": "string",
            "description": "The name of the IDL",
            "nullable": true
          },
          "idl_type": {
            "type": "string",
            "description": "The type of IDL (e.g. shank/anchor)",
            "nullable": true
          },
          "idl_version": {
            "type": "string",
            "description": "The IDL version",
            "nullable": true
          },
          "slot_deployed": {
            "type": "integer",
            "format": "int64",
            "description": "Deployed slot version of the IDL",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "IdlMetaIndependentExternalView": {
        "allOf": [
          {
            "type": "object",
            "description": "This Structure is used for displaying idl metadata (use consuming API)",
            "properties": {
              "has_accounts": {
                "type": "boolean",
                "description": "Indicates if an IDL has accounts embedded or not",
                "nullable": true
              },
              "has_events": {
                "type": "boolean",
                "description": "Indicates if an IDL has events embedded or not",
                "nullable": true
              },
              "idl": {
                "description": "The IDL JSON object",
                "nullable": true
              },
              "idl_link": {
                "type": "string",
                "description": "The link to the IDL",
                "nullable": true
              },
              "idl_name": {
                "type": "string",
                "description": "The name of the IDL",
                "nullable": true
              },
              "idl_type": {
                "type": "string",
                "description": "The type of IDL (e.g. shank/anchor)",
                "nullable": true
              },
              "idl_version": {
                "type": "string",
                "description": "The IDL version",
                "nullable": true
              },
              "slot_deployed": {
                "type": "integer",
                "format": "int64",
                "description": "Deployed slot version of the IDL",
                "nullable": true,
                "minimum": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "program_id"
            ],
            "properties": {
              "program_id": {
                "type": "string",
                "description": "The program id of the IDL"
              }
            }
          }
        ]
      },
      "IdlMetaViewModel": {
        "type": "object",
        "description": "This Structure is used for displaying idl metadata (use consuming API)",
        "properties": {
          "has_accounts": {
            "type": "boolean",
            "description": "Indicates whether an IDL has accounts or not",
            "nullable": true
          },
          "has_events": {
            "type": "boolean",
            "description": "Indicates whether an IDL has events or not",
            "nullable": true
          },
          "idl": {
            "description": "The IDL JSON file data",
            "nullable": true
          },
          "idl_link": {
            "type": "string",
            "description": "The link to the IDL",
            "nullable": true
          },
          "idl_name": {
            "type": "string",
            "description": "The name of the IDL",
            "nullable": true
          },
          "idl_type": {
            "type": "string",
            "description": "The IDL type (e.g. shank / anchor)",
            "nullable": true
          },
          "idl_version": {
            "type": "string",
            "description": "The IDL implicit version",
            "nullable": true
          },
          "slot_deployed": {
            "type": "integer",
            "format": "int64",
            "description": "The deployed slot version of the IDL",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "IdlPagination": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "description": "Cursor to the next page",
            "nullable": true
          }
        }
      },
      "IdlViewModel": {
        "type": "object",
        "required": [
          "idls",
          "pagination"
        ],
        "properties": {
          "idls": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "description": "This Structure is used for displaying idl metadata (use consuming API)",
                  "properties": {
                    "has_accounts": {
                      "type": "boolean",
                      "description": "Indicates if an IDL has accounts embedded or not",
                      "nullable": true
                    },
                    "has_events": {
                      "type": "boolean",
                      "description": "Indicates if an IDL has events embedded or not",
                      "nullable": true
                    },
                    "idl": {
                      "description": "The IDL JSON object",
                      "nullable": true
                    },
                    "idl_link": {
                      "type": "string",
                      "description": "The link to the IDL",
                      "nullable": true
                    },
                    "idl_name": {
                      "type": "string",
                      "description": "The name of the IDL",
                      "nullable": true
                    },
                    "idl_type": {
                      "type": "string",
                      "description": "The type of IDL (e.g. shank/anchor)",
                      "nullable": true
                    },
                    "idl_version": {
                      "type": "string",
                      "description": "The IDL version",
                      "nullable": true
                    },
                    "slot_deployed": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Deployed slot version of the IDL",
                      "nullable": true,
                      "minimum": 0
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "program_id"
                  ],
                  "properties": {
                    "program_id": {
                      "type": "string",
                      "description": "The program id of the IDL"
                    }
                  }
                }
              ]
            },
            "description": "A list of the IDLs retrieved"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Cursor to the next page",
                "nullable": true
              }
            }
          }
        }
      },
      "MainSearchDocViewModel": {
        "type": "object",
        "required": [
          "categories",
          "tags"
        ],
        "properties": {
          "abbreviation": {
            "type": "string",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MainSearchSuggestionDocViewModel": {
        "type": "object",
        "required": [
          "text",
          "offset",
          "length",
          "options"
        ],
        "properties": {
          "length": {
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "text": {
            "type": "string"
          }
        }
      },
      "MultipleTokensBody": {
        "type": "object",
        "properties": {
          "tokenHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "@deprecated\nUse the tokens field instead, this is to have backwards compatibility with the v0 tokens api",
            "deprecated": true,
            "example": [
              "BaconSBRjNckjeQCi6E2Ndg8wSmAwPgmfmZnF6ZmyFhz",
              "12oQm6EX2yMCQgt4sdno8iEyBaHmMvvH9kJGoM8VaeYX"
            ],
            "nullable": true
          },
          "tokens": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of token hashes to be queried for",
            "example": [
              "BaconSBRjNckjeQCi6E2Ndg8wSmAwPgmfmZnF6ZmyFhz",
              "12oQm6EX2yMCQgt4sdno8iEyBaHmMvvH9kJGoM8VaeYX"
            ],
            "nullable": true
          }
        }
      },
      "Nft": {
        "type": "object",
        "required": [
          "mint",
          "creators",
          "network",
          "isBurned"
        ],
        "properties": {
          "burnedTxSignature": {
            "type": "string",
            "description": "If the token is burned, this indicates the tx-signature of burning the token",
            "nullable": true
          },
          "collection": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "verified",
                  "key"
                ],
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Key of the collection"
                  },
                  "verified": {
                    "type": "boolean",
                    "description": "Indicates if the collection is verified"
                  }
                }
              }
            ],
            "nullable": true
          },
          "collectionKey": {
            "type": "string",
            "description": "Token's collection key",
            "nullable": true
          },
          "creators": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "address",
                "verified",
                "share"
              ],
              "properties": {
                "address": {
                  "type": "string",
                  "description": "The creator address"
                },
                "share": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The share for this particular creator(indicated in percentage)",
                  "minimum": 0
                },
                "verified": {
                  "type": "boolean",
                  "description": "Indicates if the creator is verified"
                }
              }
            },
            "description": "A list of creators for the token"
          },
          "decimals": {
            "type": "integer",
            "format": "int64",
            "description": "Decimal places that the token has",
            "nullable": true,
            "minimum": 0
          },
          "freezeAuthority": {
            "type": "string",
            "description": "Freeze authority hash of the token",
            "nullable": true
          },
          "isBurned": {
            "type": "boolean",
            "description": "Indicates whether a token is burned"
          },
          "maxSupply": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum token supply",
            "nullable": true,
            "minimum": 0
          },
          "metadata": {
            "type": "string",
            "description": "Token's metadata field",
            "nullable": true
          },
          "metadataUri": {
            "type": "string",
            "description": "Token's metadata uri",
            "nullable": true
          },
          "mint": {
            "type": "string",
            "description": "Mint address"
          },
          "mintAuthority": {
            "type": "string",
            "description": "Mint authority hash of the token",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the token",
            "nullable": true
          },
          "network": {
            "type": "string",
            "description": "(e.g. mainnet, devnet)"
          },
          "sellerFeeBasisPoints": {
            "type": "integer",
            "format": "int32",
            "description": "Seller fee basis points",
            "nullable": true,
            "minimum": 0
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the token",
            "nullable": true
          },
          "tokenType": {
            "type": "string",
            "description": "Type of the token (e.g. Fungible, Non-Fungible)",
            "nullable": true
          },
          "updateAuthority": {
            "type": "string",
            "description": "Update authority hash of the token",
            "nullable": true
          },
          "uses": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "useMethod",
                  "remaining",
                  "total"
                ],
                "properties": {
                  "remaining": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The field that holds the number of uses remaining for the token",
                    "minimum": 0
                  },
                  "total": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The field that holds the numebr of uses initially available for the token",
                    "minimum": 0
                  },
                  "useMethod": {
                    "type": "string",
                    "enum": [
                      "Burn",
                      "Multiple",
                      "Single",
                      "Null"
                    ]
                  }
                }
              }
            ],
            "nullable": true
          }
        }
      },
      "NftViewModel": {
        "type": "object",
        "required": [
          "tokenHash"
        ],
        "properties": {
          "data": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "mint",
                  "creators",
                  "network",
                  "isBurned"
                ],
                "properties": {
                  "burnedTxSignature": {
                    "type": "string",
                    "description": "If the token is burned, this indicates the tx-signature of burning the token",
                    "nullable": true
                  },
                  "collection": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "verified",
                          "key"
                        ],
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Key of the collection"
                          },
                          "verified": {
                            "type": "boolean",
                            "description": "Indicates if the collection is verified"
                          }
                        }
                      }
                    ],
                    "nullable": true
                  },
                  "collectionKey": {
                    "type": "string",
                    "description": "Token's collection key",
                    "nullable": true
                  },
                  "creators": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "address",
                        "verified",
                        "share"
                      ],
                      "properties": {
                        "address": {
                          "type": "string",
                          "description": "The creator address"
                        },
                        "share": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The share for this particular creator(indicated in percentage)",
                          "minimum": 0
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "Indicates if the creator is verified"
                        }
                      }
                    },
                    "description": "A list of creators for the token"
                  },
                  "decimals": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Decimal places that the token has",
                    "nullable": true,
                    "minimum": 0
                  },
                  "freezeAuthority": {
                    "type": "string",
                    "description": "Freeze authority hash of the token",
                    "nullable": true
                  },
                  "isBurned": {
                    "type": "boolean",
                    "description": "Indicates whether a token is burned"
                  },
                  "maxSupply": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum token supply",
                    "nullable": true,
                    "minimum": 0
                  },
                  "metadata": {
                    "type": "string",
                    "description": "Token's metadata field",
                    "nullable": true
                  },
                  "metadataUri": {
                    "type": "string",
                    "description": "Token's metadata uri",
                    "nullable": true
                  },
                  "mint": {
                    "type": "string",
                    "description": "Mint address"
                  },
                  "mintAuthority": {
                    "type": "string",
                    "description": "Mint authority hash of the token",
                    "nullable": true
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the token",
                    "nullable": true
                  },
                  "network": {
                    "type": "string",
                    "description": "(e.g. mainnet, devnet)"
                  },
                  "sellerFeeBasisPoints": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Seller fee basis points",
                    "nullable": true,
                    "minimum": 0
                  },
                  "symbol": {
                    "type": "string",
                    "description": "Symbol of the token",
                    "nullable": true
                  },
                  "tokenType": {
                    "type": "string",
                    "description": "Type of the token (e.g. Fungible, Non-Fungible)",
                    "nullable": true
                  },
                  "updateAuthority": {
                    "type": "string",
                    "description": "Update authority hash of the token",
                    "nullable": true
                  },
                  "uses": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "useMethod",
                          "remaining",
                          "total"
                        ],
                        "properties": {
                          "remaining": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The field that holds the number of uses remaining for the token",
                            "minimum": 0
                          },
                          "total": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The field that holds the numebr of uses initially available for the token",
                            "minimum": 0
                          },
                          "useMethod": {
                            "type": "string",
                            "enum": [
                              "Burn",
                              "Multiple",
                              "Single",
                              "Null"
                            ]
                          }
                        }
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            ],
            "nullable": true
          },
          "tokenHash": {
            "type": "string",
            "description": "Token hash based on the hash that you queried for"
          }
        }
      },
      "NourishedTokensByOwner": {
        "type": "object",
        "required": [
          "pubkey",
          "tokens"
        ],
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "pubkey": {
            "type": "string",
            "description": "Account hash that you input in your API query"
          },
          "tokens": {
            "type": "object",
            "description": "A key-value mapping of all the initialised token accounts of the owner",
            "additionalProperties": {
              "type": "object",
              "required": [
                "mint"
              ],
              "properties": {
                "ata": {
                  "type": "string",
                  "description": "Associated token account of the owner that supports the token mint\nThis field will be null for cNFTs",
                  "nullable": true
                },
                "balance": {
                  "type": "number",
                  "format": "double",
                  "description": "The ui amount of the token balance",
                  "nullable": true
                },
                "mint": {
                  "type": "string",
                  "description": "The token mint hash"
                },
                "tokenData": {
                  "description": "Asset's token details",
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "PaginateTokenAccountParams": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "description": "Page number of the next page to retrieve",
            "nullable": true,
            "minimum": 0
          },
          "pageSize": {
            "type": "integer",
            "format": "int64",
            "description": "Number of items to return in a single response",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "PaginationCursors": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "description": "Next cursor string",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "description": "Prev cursor string",
            "nullable": true
          }
        }
      },
      "ParsedAccount": {
        "type": "object",
        "required": [
          "info",
          "account_type"
        ],
        "properties": {
          "account_type": {
            "type": "string"
          },
          "info": {}
        }
      },
      "PostAccountRequestBody": {
        "type": "object",
        "required": [
          "accountHashes"
        ],
        "properties": {
          "accountHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The account/wallet hashes to query for",
            "example": [
              "Cs23cJMRuahuKh5oNhVmLhM2UrtaZLULLF3HqrxfTnHc",
              "A6TDkkwU1BS6Ywe5xcaWsZjuYci8YzzqXA6363khgoP5"
            ]
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specify the field objects to be returned in the result\nAvailable array fields: `data`, `onchain`, `*`",
            "example": [
              "onchain"
            ],
            "nullable": true
          }
        }
      },
      "PostAccountViewModel": {
        "type": "object",
        "required": [
          "accountHash"
        ],
        "properties": {
          "accountHash": {
            "type": "string",
            "description": "The pubkey of the account returned"
          },
          "data": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "friendlyName",
                  "abbreviation",
                  "category",
                  "network",
                  "tags"
                ],
                "properties": {
                  "abbreviation": {
                    "type": "string",
                    "description": "Account abbreviation (e.g. USDC)"
                  },
                  "category": {
                    "type": "string",
                    "description": "Category of the Account (e.g. Tokens)"
                  },
                  "flag": {
                    "type": "string",
                    "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                    "nullable": true
                  },
                  "friendlyName": {
                    "type": "string",
                    "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                  },
                  "logoURI": {
                    "type": "string",
                    "description": "Image url for the account",
                    "nullable": true
                  },
                  "network": {
                    "type": "string",
                    "description": "(e.g. mainnet/devnet)"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "SolanaFM labelled tags"
                  },
                  "voteKey": {
                    "type": "string",
                    "description": "Vote key only exists for validator accounts",
                    "nullable": true
                  }
                }
              }
            ],
            "nullable": true
          },
          "onchain": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "lamports",
                  "data",
                  "owner",
                  "executable",
                  "rentEpoch"
                ],
                "properties": {
                  "data": {
                    "oneOf": [
                      {
                        "type": "string",
                        "format": "binary"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "info",
                          "account_type"
                        ],
                        "properties": {
                          "account_type": {
                            "type": "string"
                          },
                          "info": {}
                        }
                      }
                    ]
                  },
                  "executable": {
                    "type": "boolean",
                    "description": "Indicates whether the account is an executable account or not"
                  },
                  "lamports": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Amount of lamports in the account",
                    "minimum": 0
                  },
                  "owner": {
                    "type": "string",
                    "description": "Owner of the account"
                  },
                  "rentEpoch": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Rent epoch of the account",
                    "minimum": 0
                  }
                }
              }
            ],
            "nullable": true
          }
        }
      },
      "PostBlockRequestBody": {
        "type": "object",
        "required": [
          "blockNumbers"
        ],
        "properties": {
          "blockNumbers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            },
            "description": "A list of block numbers to query for"
          },
          "hydration": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "accountHash"
                ],
                "properties": {
                  "accountHash": {
                    "type": "boolean",
                    "description": "(true/false) to include hydration of account info in the response"
                  }
                }
              }
            ],
            "nullable": true
          }
        }
      },
      "PostFavouriteDomainRequestBody": {
        "type": "object",
        "required": [
          "accountHashes",
          "fidaType"
        ],
        "properties": {
          "accountHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of domain owner account hashes to query for"
          },
          "fidaType": {
            "type": "string",
            "description": "Fida type to filter the results\nOptions are either `OWNER` or `NAME_SERVICE`"
          }
        }
      },
      "PostFavouriteDomainViewModel": {
        "type": "object",
        "required": [
          "owner",
          "name",
          "nameServiceAccount"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the domain"
          },
          "nameServiceAccount": {
            "type": "string",
            "description": "The name service account hash of the domain"
          },
          "owner": {
            "type": "string",
            "description": "The domain owner's account hash"
          }
        }
      },
      "PostMetaplexNftReqBody": {
        "type": "object",
        "description": "This is the struct of the request body for user to create POST request",
        "required": [
          "tokenHashes"
        ],
        "properties": {
          "tokenHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of token hashes to be queried for\n(min length: 1, max length: 50)",
            "example": [
              "2xDpgF5Cbry7JDZUvs2St5EcaEG7QdGoWuW5SEvEmQ1i",
              "1aWcHsEqeSTfSd7PdZB67qqKanWJs6J6qUwtm8HnnCG",
              "1aWGHSWMyhs9mqnkB8hh6FFf6pHeVTBExiMJgmyPUTw"
            ]
          }
        }
      },
      "PostMultipleDomainRequestBody": {
        "type": "object",
        "required": [
          "accountHashes"
        ],
        "properties": {
          "accountHashes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PostProgramsMetaReqBody": {
        "type": "object",
        "title": "Programs",
        "required": [
          "programHashes"
        ],
        "properties": {
          "programHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of program hashes to query for",
            "example": [
              "G317XThznKMemjmSBEekMSsPedT9krKcAeRmE39drhNA",
              "Cpo1NoX4pqyvbe2YLvKC7aiTqs711m7WYRdrhN65Tq4m"
            ]
          },
          "slotContext": {
            "type": "integer",
            "format": "int64",
            "description": "The slot number of the deployed IDL version that you are looking for",
            "example": 176096448,
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "PostSubdomainRequestBody": {
        "type": "object",
        "required": [
          "accountHashes"
        ],
        "properties": {
          "accountHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of domain owner's account hashes"
          }
        }
      },
      "PostTokenRequest": {
        "type": "object",
        "required": [
          "tokenHashes"
        ],
        "properties": {
          "hydration": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "accountHash"
                ],
                "properties": {
                  "accountHash": {
                    "type": "boolean",
                    "description": "(true/false) to include hydration of account info in the response"
                  }
                }
              }
            ],
            "nullable": true
          },
          "tokenHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of token hashes to be queried\n(min length: 1, max length: 50)",
            "example": [
              "BaconSBRjNckjeQCi6E2Ndg8wSmAwPgmfmZnF6ZmyFhz",
              "12oQm6EX2yMCQgt4sdno8iEyBaHmMvvH9kJGoM8VaeYX"
            ]
          }
        }
      },
      "Producer": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "String"
            ],
            "properties": {
              "String": {
                "type": "string",
                "description": "The block producer account hash"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Account"
            ],
            "properties": {
              "Account": {
                "type": "object",
                "required": [
                  "accountHash"
                ],
                "properties": {
                  "accountHash": {
                    "type": "string",
                    "description": "The pubkey of the account returned"
                  },
                  "data": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "friendlyName",
                          "abbreviation",
                          "category",
                          "network",
                          "tags"
                        ],
                        "properties": {
                          "abbreviation": {
                            "type": "string",
                            "description": "Account abbreviation (e.g. USDC)"
                          },
                          "category": {
                            "type": "string",
                            "description": "Category of the Account (e.g. Tokens)"
                          },
                          "flag": {
                            "type": "string",
                            "description": "SolanaFM flagged accounts (e.g. scammer, hacker)",
                            "nullable": true
                          },
                          "friendlyName": {
                            "type": "string",
                            "description": "SolanaFM labelled name / on-chain indexed name (e.g. USD Coin)"
                          },
                          "logoURI": {
                            "type": "string",
                            "description": "Image url for the account",
                            "nullable": true
                          },
                          "network": {
                            "type": "string",
                            "description": "(e.g. mainnet/devnet)"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "SolanaFM labelled tags"
                          },
                          "voteKey": {
                            "type": "string",
                            "description": "Vote key only exists for validator accounts",
                            "nullable": true
                          }
                        }
                      }
                    ],
                    "nullable": true
                  },
                  "onchain": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "lamports",
                          "data",
                          "owner",
                          "executable",
                          "rentEpoch"
                        ],
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "type": "string",
                                "format": "binary"
                              },
                              {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "info",
                                  "account_type"
                                ],
                                "properties": {
                                  "account_type": {
                                    "type": "string"
                                  },
                                  "info": {}
                                }
                              }
                            ]
                          },
                          "executable": {
                            "type": "boolean",
                            "description": "Indicates whether the account is an executable account or not"
                          },
                          "lamports": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Amount of lamports in the account",
                            "minimum": 0
                          },
                          "owner": {
                            "type": "string",
                            "description": "Owner of the account"
                          },
                          "rentEpoch": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Rent epoch of the account",
                            "minimum": 0
                          }
                        }
                      }
                    ],
                    "nullable": true
                  }
                }
              }
            }
          }
        ]
      },
      "ProgramIdlViewModel": {
        "type": "object",
        "required": [
          "program_hash",
          "program_information"
        ],
        "properties": {
          "idl_information": {
            "allOf": [
              {
                "type": "object",
                "description": "This Structure is used for displaying idl metadata (use consuming API)",
                "properties": {
                  "has_accounts": {
                    "type": "boolean",
                    "description": "Indicates whether an IDL has accounts or not",
                    "nullable": true
                  },
                  "has_events": {
                    "type": "boolean",
                    "description": "Indicates whether an IDL has events or not",
                    "nullable": true
                  },
                  "idl": {
                    "description": "The IDL JSON file data",
                    "nullable": true
                  },
                  "idl_link": {
                    "type": "string",
                    "description": "The link to the IDL",
                    "nullable": true
                  },
                  "idl_name": {
                    "type": "string",
                    "description": "The name of the IDL",
                    "nullable": true
                  },
                  "idl_type": {
                    "type": "string",
                    "description": "The IDL type (e.g. shank / anchor)",
                    "nullable": true
                  },
                  "idl_version": {
                    "type": "string",
                    "description": "The IDL implicit version",
                    "nullable": true
                  },
                  "slot_deployed": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The deployed slot version of the IDL",
                    "nullable": true,
                    "minimum": 0
                  }
                }
              }
            ],
            "nullable": true
          },
          "program_hash": {
            "type": "string",
            "description": "The program hash of the IDL"
          },
          "program_information": {
            "type": "object",
            "required": [
              "has_idl",
              "is_closed"
            ],
            "properties": {
              "has_idl": {
                "type": "boolean",
                "description": "Indicates whether the program has an IDL deployed"
              },
              "is_closed": {
                "type": "boolean",
                "description": "Indicates whether the program is a closed account"
              },
              "slot_deployed": {
                "type": "integer",
                "format": "int64",
                "description": "Indicates the deployed slot number of the program",
                "nullable": true,
                "minimum": 0
              }
            }
          }
        }
      },
      "ProgramMetaPagination": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "description": "The next cursor pointer",
            "nullable": true
          }
        }
      },
      "ProgramMetaViewModel": {
        "type": "object",
        "required": [
          "has_idl",
          "is_closed"
        ],
        "properties": {
          "has_idl": {
            "type": "boolean",
            "description": "Indicates whether the program has an IDL deployed"
          },
          "is_closed": {
            "type": "boolean",
            "description": "Indicates whether the program is a closed account"
          },
          "slot_deployed": {
            "type": "integer",
            "format": "int64",
            "description": "Indicates the deployed slot number of the program",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "PrunedSubdomain": {
        "type": "object",
        "required": [
          "name",
          "subdomainHash"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the subdomain"
          },
          "subdomainHash": {
            "type": "string",
            "description": "The subdomain account hash"
          }
        }
      },
      "ResultCategorisation": {
        "allOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "required": [
              "directDomainHit"
            ],
            "properties": {
              "directDomainHit": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "domainName",
                    "account"
                  ],
                  "properties": {
                    "account": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "categories",
                            "tags"
                          ],
                          "properties": {
                            "abbreviation": {
                              "type": "string",
                              "nullable": true
                            },
                            "categories": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "description": {
                              "type": "string",
                              "nullable": true
                            },
                            "hash": {
                              "type": "string",
                              "nullable": true
                            },
                            "logoUrl": {
                              "type": "string",
                              "nullable": true
                            },
                            "name": {
                              "type": "string",
                              "nullable": true
                            },
                            "owner": {
                              "type": "string",
                              "nullable": true
                            },
                            "tags": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "domainName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "RetCollection": {
        "type": "object",
        "required": [
          "verified",
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the collection"
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates if the collection is verified"
          }
        }
      },
      "RetCreator": {
        "type": "object",
        "required": [
          "address",
          "verified",
          "share"
        ],
        "properties": {
          "address": {
            "type": "string",
            "description": "The creator address"
          },
          "share": {
            "type": "integer",
            "format": "int32",
            "description": "The share for this particular creator(indicated in percentage)",
            "minimum": 0
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates if the creator is verified"
          }
        }
      },
      "RpcDocument": {
        "type": "object",
        "required": [
          "network",
          "country",
          "rpc_url",
          "rpc_website",
          "logo",
          "rpc_name"
        ],
        "properties": {
          "country": {
            "type": "string",
            "description": "The country that the RPC network resides"
          },
          "friendly_key": {
            "type": "string",
            "description": "The friendly name of the RPC network",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "description": "The RPC provider's logo"
          },
          "network": {
            "type": "string",
            "description": "(e.g. mainnet, devnet)"
          },
          "rank": {
            "type": "integer",
            "format": "int64",
            "description": "The ranking of the RPC network indicated based on RPC's performance",
            "nullable": true
          },
          "rpc_name": {
            "type": "string",
            "description": "The RPC provider's name"
          },
          "rpc_url": {
            "type": "string",
            "description": "The RPC url"
          },
          "rpc_website": {
            "type": "string",
            "description": "The RPC provider's website"
          }
        }
      },
      "SearchViewModelEnum": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "categories",
                "tags"
              ],
              "properties": {
                "abbreviation": {
                  "type": "string",
                  "nullable": true
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "hash": {
                  "type": "string",
                  "nullable": true
                },
                "logoUrl": {
                  "type": "string",
                  "nullable": true
                },
                "name": {
                  "type": "string",
                  "nullable": true
                },
                "owner": {
                  "type": "string",
                  "nullable": true
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "allOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "required": [
                  "directDomainHit"
                ],
                "properties": {
                  "directDomainHit": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "domainName",
                        "account"
                      ],
                      "properties": {
                        "account": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "categories",
                                "tags"
                              ],
                              "properties": {
                                "abbreviation": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "categories": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "hash": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "logoUrl": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "name": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "owner": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "tags": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "domainName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        ]
      },
      "SlotDeployedIdlLink": {
        "type": "object",
        "properties": {
          "idl_link": {
            "type": "string",
            "description": "The link to download the idl",
            "nullable": true
          },
          "slot_deployed": {
            "type": "integer",
            "format": "int64",
            "description": "The slot that the IDL is deployed on-chain",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "SubdomainViewModel": {
        "type": "object",
        "required": [
          "owner",
          "subdomains"
        ],
        "properties": {
          "owner": {
            "type": "string",
            "description": "The owner's hash of the domain"
          },
          "subdomains": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "subdomainHash"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the subdomain"
                },
                "subdomainHash": {
                  "type": "string",
                  "description": "The subdomain account hash"
                }
              }
            },
            "description": "The list of subdomains owned"
          }
        }
      },
      "SuggestiveSearch": {
        "type": "object",
        "required": [
          "searchHits",
          "remainingSuggestions"
        ],
        "properties": {
          "remainingSuggestions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "searchHits": {}
        }
      },
      "SuggestiveSearchViewModelEnum": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "searchHits",
              "remainingSuggestions"
            ],
            "properties": {
              "remainingSuggestions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "searchHits": {}
            }
          },
          {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "categories",
                "tags"
              ],
              "properties": {
                "abbreviation": {
                  "type": "string",
                  "nullable": true
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true
                },
                "hash": {
                  "type": "string",
                  "nullable": true
                },
                "logoUrl": {
                  "type": "string",
                  "nullable": true
                },
                "name": {
                  "type": "string",
                  "nullable": true
                },
                "owner": {
                  "type": "string",
                  "nullable": true
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "TokenData": {
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "ata": {
            "type": "string",
            "description": "Associated token account of the owner that supports the token mint\nThis field will be null for cNFTs",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "format": "double",
            "description": "The ui amount of the token balance",
            "nullable": true
          },
          "mint": {
            "type": "string",
            "description": "The token mint hash"
          },
          "tokenData": {
            "description": "Asset's token details",
            "nullable": true
          }
        }
      },
      "TokenDocument": {
        "type": "object",
        "required": [
          "mint",
          "cache_name",
          "cache_symbol",
          "decimals",
          "description",
          "cache_logo",
          "tags",
          "verified",
          "network",
          "metadata_token"
        ],
        "properties": {
          "cache_logo": {
            "type": "string",
            "description": "Image url of the token logo"
          },
          "cache_name": {
            "type": "string",
            "description": "Token name (e.g. USD Coin) that is either indexed or labelled by the SolanaFM team"
          },
          "cache_symbol": {
            "type": "string",
            "description": "Token symbol (e.g. USDC) that is either indexed or labelled by the SolanaFM team"
          },
          "decimals": {
            "type": "integer",
            "format": "int32",
            "description": "Decimal place of the token",
            "minimum": 0
          },
          "description": {
            "type": "string",
            "description": "Description of the token"
          },
          "metadata_token": {
            "type": "string",
            "description": "Token's metadata field"
          },
          "mint": {
            "type": "string",
            "description": "Token mint hash"
          },
          "network": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "(e.g. mainnet, devnet)"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "SolanaFM labelled tags"
          },
          "verified": {
            "type": "string",
            "description": "Indicates if the token is verified on-chain"
          }
        }
      },
      "TokenPagination": {
        "type": "object",
        "required": [
          "page"
        ],
        "properties": {
          "next_cursor": {
            "type": "string",
            "nullable": true
          },
          "page": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "mint",
                "cache_name",
                "cache_symbol",
                "decimals",
                "description",
                "cache_logo",
                "tags",
                "verified",
                "network",
                "metadata_token"
              ],
              "properties": {
                "cache_logo": {
                  "type": "string",
                  "description": "Image url of the token logo"
                },
                "cache_name": {
                  "type": "string",
                  "description": "Token name (e.g. USD Coin) that is either indexed or labelled by the SolanaFM team"
                },
                "cache_symbol": {
                  "type": "string",
                  "description": "Token symbol (e.g. USDC) that is either indexed or labelled by the SolanaFM team"
                },
                "decimals": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Decimal place of the token",
                  "minimum": 0
                },
                "description": {
                  "type": "string",
                  "description": "Description of the token"
                },
                "metadata_token": {
                  "type": "string",
                  "description": "Token's metadata field"
                },
                "mint": {
                  "type": "string",
                  "description": "Token mint hash"
                },
                "network": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "(e.g. mainnet, devnet)"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "SolanaFM labelled tags"
                },
                "verified": {
                  "type": "string",
                  "description": "Indicates if the token is verified on-chain"
                }
              }
            }
          },
          "previous_cursor": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TokenPaginationViewModel": {
        "type": "object",
        "required": [
          "data",
          "pagination"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "tokenHash",
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "mint",
                    "cache_name",
                    "cache_symbol",
                    "decimals",
                    "description",
                    "cache_logo",
                    "tags",
                    "verified",
                    "network",
                    "metadata_token"
                  ],
                  "properties": {
                    "cache_logo": {
                      "type": "string",
                      "description": "Image url of the token logo"
                    },
                    "cache_name": {
                      "type": "string",
                      "description": "Token name (e.g. USD Coin) that is either indexed or labelled by the SolanaFM team"
                    },
                    "cache_symbol": {
                      "type": "string",
                      "description": "Token symbol (e.g. USDC) that is either indexed or labelled by the SolanaFM team"
                    },
                    "decimals": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Decimal place of the token",
                      "minimum": 0
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the token"
                    },
                    "metadata_token": {
                      "type": "string",
                      "description": "Token's metadata field"
                    },
                    "mint": {
                      "type": "string",
                      "description": "Token mint hash"
                    },
                    "network": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "(e.g. mainnet, devnet)"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "SolanaFM labelled tags"
                    },
                    "verified": {
                      "type": "string",
                      "description": "Indicates if the token is verified on-chain"
                    }
                  }
                },
                "tokenHash": {
                  "type": "string",
                  "description": "Token hash based on the hash that you queried for"
                }
              }
            },
            "description": "A list of tokens"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Next cursor string",
                "nullable": true
              },
              "previous": {
                "type": "string",
                "description": "Prev cursor string",
                "nullable": true
              }
            }
          }
        }
      },
      "TokenSupplyViewModel": {
        "type": "object",
        "properties": {
          "circulatingSupply": {
            "type": "number",
            "format": "double",
            "description": "The circulating supply indicated on the token",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "format": "int32",
            "description": "The decimals position",
            "nullable": true,
            "minimum": 0
          },
          "realCirculatingSupply": {
            "type": "number",
            "format": "double",
            "description": "The real circulating supply computed based on (total_circulating_supply - total_burnt)",
            "nullable": true
          },
          "tokenWithheldAmount": {
            "type": "number",
            "format": "double",
            "description": "The withheld amount by the withheld authority itself",
            "nullable": true
          },
          "totalWithheldAmount": {
            "type": "number",
            "format": "double",
            "description": "The mint withheld amount - token accounts withheld amount",
            "nullable": true
          },
          "userTotalWithheldAmount": {
            "type": "number",
            "format": "double",
            "description": "The withheld authority total withheld amount",
            "nullable": true
          }
        }
      },
      "TokenViewModel": {
        "type": "object",
        "required": [
          "tokenHash",
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "mint",
              "cache_name",
              "cache_symbol",
              "decimals",
              "description",
              "cache_logo",
              "tags",
              "verified",
              "network",
              "metadata_token"
            ],
            "properties": {
              "cache_logo": {
                "type": "string",
                "description": "Image url of the token logo"
              },
              "cache_name": {
                "type": "string",
                "description": "Token name (e.g. USD Coin) that is either indexed or labelled by the SolanaFM team"
              },
              "cache_symbol": {
                "type": "string",
                "description": "Token symbol (e.g. USDC) that is either indexed or labelled by the SolanaFM team"
              },
              "decimals": {
                "type": "integer",
                "format": "int32",
                "description": "Decimal place of the token",
                "minimum": 0
              },
              "description": {
                "type": "string",
                "description": "Description of the token"
              },
              "metadata_token": {
                "type": "string",
                "description": "Token's metadata field"
              },
              "mint": {
                "type": "string",
                "description": "Token mint hash"
              },
              "network": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "(e.g. mainnet, devnet)"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "SolanaFM labelled tags"
              },
              "verified": {
                "type": "string",
                "description": "Indicates if the token is verified on-chain"
              }
            }
          },
          "tokenHash": {
            "type": "string",
            "description": "Token hash based on the hash that you queried for"
          }
        }
      },
      "TotalStakesViewModel": {
        "type": "object",
        "required": [
          "totalStakeLamports",
          "delegatorCount"
        ],
        "properties": {
          "delegatorCount": {
            "type": "integer",
            "format": "int64",
            "description": "The amount of delegators",
            "minimum": 0
          },
          "totalStakeLamports": {
            "type": "integer",
            "format": "int64",
            "description": "The total stake amount in lamports",
            "minimum": 0
          }
        }
      },
      "TransactionsRequestBody": {
        "type": "object",
        "required": [
          "transactionHashes"
        ],
        "properties": {
          "hydration": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "accountHash"
                ],
                "properties": {
                  "accountHash": {
                    "type": "boolean",
                    "description": "(true/false) to include hydration of account info in the response"
                  }
                }
              }
            ],
            "nullable": true
          },
          "transactionHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of transaction hashes to query for\n(min length: 1, max length: 50)",
            "example": [
              "2cZZcAUd153ZecbqjsdtmpWupnpQsGwSvTd9dprbiqz3BPG6WySika4Aww3zq2yxXeKRZeGM3mbXGjeX3VNHnVXg",
              "2qhDiKNNnTk6qEmz5woWo4UBH7XFNRp4i7i6tsheNBfbTyAqcR86DEVaqHENqN4J3W1go6Heh3Zp2oVV4DUPt5k6"
            ]
          }
        }
      },
      "TransferData": {
        "type": "object",
        "required": [
          "instructionIndex",
          "innerInstructionIndex",
          "action",
          "status",
          "token",
          "amount",
          "timestamp"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "The transfer action identified by the SolanaFM team"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "description": "The amount that is being transferred",
            "minimum": 0
          },
          "destination": {
            "type": "string",
            "description": "The destination account hash of the fund",
            "nullable": true
          },
          "destinationAssociation": {
            "type": "string",
            "description": "The associated destination account hash",
            "nullable": true
          },
          "innerInstructionIndex": {
            "type": "integer",
            "format": "int32",
            "description": "The inner instruction index of this movement"
          },
          "instructionIndex": {
            "type": "integer",
            "format": "int32",
            "description": "The instruction index of this movement"
          },
          "source": {
            "type": "string",
            "description": "The source account hash of the funds",
            "nullable": true
          },
          "sourceAssociation": {
            "type": "string",
            "description": "The associated source account hash",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The status of the transfer"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The timestamp of the transaction",
            "minimum": 0
          },
          "token": {
            "type": "string",
            "description": "The token hash involved in the movement"
          }
        }
      },
      "TransferViewModel": {
        "type": "object",
        "required": [
          "transactionHash",
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "instructionIndex",
                "innerInstructionIndex",
                "action",
                "status",
                "token",
                "amount",
                "timestamp"
              ],
              "properties": {
                "action": {
                  "type": "string",
                  "description": "The transfer action identified by the SolanaFM team"
                },
                "amount": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The amount that is being transferred",
                  "minimum": 0
                },
                "destination": {
                  "type": "string",
                  "description": "The destination account hash of the fund",
                  "nullable": true
                },
                "destinationAssociation": {
                  "type": "string",
                  "description": "The associated destination account hash",
                  "nullable": true
                },
                "innerInstructionIndex": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The inner instruction index of this movement"
                },
                "instructionIndex": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The instruction index of this movement"
                },
                "source": {
                  "type": "string",
                  "description": "The source account hash of the funds",
                  "nullable": true
                },
                "sourceAssociation": {
                  "type": "string",
                  "description": "The associated source account hash",
                  "nullable": true
                },
                "status": {
                  "type": "string",
                  "description": "The status of the transfer"
                },
                "timestamp": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The timestamp of the transaction",
                  "minimum": 0
                },
                "token": {
                  "type": "string",
                  "description": "The token hash involved in the movement"
                }
              }
            },
            "description": "A list of all the individual fund movements"
          },
          "transactionHash": {
            "type": "string",
            "description": "The transaction hash of the transfer"
          }
        }
      },
      "UiTensorActiveListing": {
        "type": "object",
        "required": [
          "mint",
          "listings"
        ],
        "properties": {
          "listings": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "basePrice",
                "priceUnit"
              ],
              "properties": {
                "basePrice": {
                  "type": "string",
                  "description": "Base price of the listed token"
                },
                "priceUnit": {
                  "type": "string",
                  "description": "Price unit (currency) of the listed token"
                }
              }
            },
            "description": "Available listings of the item"
          },
          "mint": {
            "type": "string",
            "description": "Token mint of the listed item"
          }
        }
      },
      "UiTensorActiveListingParsedTransaction": {
        "type": "object",
        "required": [
          "basePrice",
          "priceUnit"
        ],
        "properties": {
          "basePrice": {
            "type": "string",
            "description": "Base price of the listed token"
          },
          "priceUnit": {
            "type": "string",
            "description": "Price unit (currency) of the listed token"
          }
        }
      },
      "UiTokenV2CollectionMoonRank": {
        "type": "object",
        "required": [
          "name",
          "verified",
          "image",
          "pieces",
          "extensions"
        ],
        "properties": {
          "extensions": {
            "type": "object",
            "properties": {
              "coralCubeId": {
                "type": "string",
                "nullable": true
              },
              "hyperspaceId": {
                "type": "string",
                "nullable": true
              },
              "magicedenId": {
                "type": "string",
                "nullable": true
              },
              "solanartId": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pieces": {
            "type": "integer",
            "format": "int64"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "UiTokenV2CollectionMoonRankExtensions": {
        "type": "object",
        "properties": {
          "coralCubeId": {
            "type": "string",
            "nullable": true
          },
          "hyperspaceId": {
            "type": "string",
            "nullable": true
          },
          "magicedenId": {
            "type": "string",
            "nullable": true
          },
          "solanartId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UiTokenV2MetadataOnchainInfo": {
        "type": "object",
        "required": [
          "creators"
        ],
        "properties": {
          "collection": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "verified",
                  "key"
                ],
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  }
                }
              }
            ],
            "nullable": true
          },
          "collectionDetails": {
            "nullable": true
          },
          "creators": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "address",
                "verified",
                "share"
              ],
              "properties": {
                "address": {
                  "type": "string"
                },
                "share": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "verified": {
                  "type": "boolean"
                }
              }
            }
          },
          "edition": {
            "type": "string",
            "nullable": true
          },
          "isMasterEdition": {
            "type": "boolean",
            "nullable": true
          },
          "isMutable": {
            "type": "boolean",
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "primarySaleHappened": {
            "type": "boolean",
            "nullable": true
          },
          "ruleSet": {
            "type": "string",
            "nullable": true
          },
          "sellerFeeBasisPoints": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "minimum": 0
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "updateAuthority": {
            "type": "string",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "nullable": true
          },
          "uses": {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "useMethod",
                  "remaining",
                  "total"
                ],
                "properties": {
                  "remaining": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "total": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0
                  },
                  "useMethod": {}
                }
              }
            ],
            "nullable": true
          }
        }
      },
      "UiTokenV2MetadataOnchainInfoCollection": {
        "type": "object",
        "required": [
          "verified",
          "key"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "UiTokenV2MetadataOnchainInfoCreator": {
        "type": "object",
        "required": [
          "address",
          "verified",
          "share"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "share": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "verified": {
            "type": "boolean"
          }
        }
      },
      "UiTokenV2MetadataOnchainInfoUses": {
        "type": "object",
        "required": [
          "useMethod",
          "remaining",
          "total"
        ],
        "properties": {
          "remaining": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "useMethod": {}
        }
      },
      "UseMethod": {
        "type": "string",
        "enum": [
          "Burn",
          "Multiple",
          "Single",
          "Null"
        ]
      },
      "Uses": {
        "type": "object",
        "required": [
          "useMethod",
          "remaining",
          "total"
        ],
        "properties": {
          "remaining": {
            "type": "integer",
            "format": "int64",
            "description": "The field that holds the number of uses remaining for the token",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "description": "The field that holds the numebr of uses initially available for the token",
            "minimum": 0
          },
          "useMethod": {
            "type": "string",
            "enum": [
              "Burn",
              "Multiple",
              "Single",
              "Null"
            ]
          }
        }
      },
      "ValidatorViewModel": {
        "type": "object",
        "required": [
          "account",
          "voteAccount",
          "network",
          "name",
          "softwareVersion",
          "commission",
          "ip",
          "lastVote",
          "stake",
          "stakeInSol",
          "jito",
          "delinquent"
        ],
        "properties": {
          "account": {
            "type": "string",
            "description": "The public key of the validator",
            "example": "XkCriyrNwS3G4rzAXtG5B1nnvb5Ka1JtCku93VqeKAr"
          },
          "asnCode": {
            "type": "integer",
            "format": "int64",
            "description": "The asn code related to this validator",
            "example": "16509",
            "nullable": true
          },
          "asnId": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the asn related to this validator",
            "example": "270",
            "nullable": true
          },
          "asnName": {
            "type": "string",
            "description": "The asn name related to this validator",
            "example": "AMAZON-02",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city where the validator is located",
            "example": "Tokyo",
            "nullable": true
          },
          "commission": {
            "type": "integer",
            "format": "int64",
            "description": "The commission of the validator",
            "example": 8
          },
          "country": {
            "type": "string",
            "description": "The country where the validator is located",
            "example": "Japan",
            "nullable": true
          },
          "delinquent": {
            "type": "boolean",
            "description": "Whether the validator is delinquent",
            "example": 1
          },
          "historicalSkipRate": {
            "type": "number",
            "format": "double",
            "description": "The historical skip rate of this validator",
            "example": 1,
            "nullable": true
          },
          "ip": {
            "type": "string",
            "description": "The IP address of the validator",
            "example": "35.77.221.213"
          },
          "isoCode": {
            "type": "string",
            "description": "The iso/country code of the country where the validator is located",
            "example": "JP",
            "nullable": true
          },
          "jito": {
            "type": "boolean",
            "description": "Whether the validator is using JITO",
            "example": false
          },
          "keybaseUsername": {
            "type": "string",
            "description": "The keybase username of the validator",
            "example": "coinbasecloud",
            "nullable": true
          },
          "lastVote": {
            "type": "integer",
            "format": "int64",
            "description": "The most recent slot voted on by this vote account (Updated every 24hrs)",
            "example": 209333679
          },
          "name": {
            "type": "string",
            "description": "The name of the validator",
            "example": "Coinbase Cloud"
          },
          "network": {
            "type": "string",
            "description": "The network of the validator",
            "example": "mainnet"
          },
          "skipRate": {
            "type": "number",
            "format": "double",
            "description": "The skip rate from the epoch in skip_rate_epoch",
            "example": 1,
            "nullable": true
          },
          "skipRateEpoch": {
            "type": "integer",
            "format": "int64",
            "description": "The latest epoch with skip rate data",
            "example": 1,
            "nullable": true
          },
          "softwareVersion": {
            "type": "string",
            "description": "The software version of the validator",
            "example": "1.14.20"
          },
          "stake": {
            "type": "integer",
            "format": "int64",
            "description": "The amount staked in lamports",
            "example": 1
          },
          "stakeInSol": {
            "type": "number",
            "format": "double",
            "description": "The amount staked in SOL",
            "example": 1
          },
          "validatorDetails": {
            "type": "string",
            "description": "The additional details of the validator",
            "example": "Coinbase Cloud provides secure and reliable blockchain infrastructure and APIs. Stake your crypto to our enterprise-grade validators.",
            "nullable": true
          },
          "voteAccount": {
            "type": "string",
            "description": "The vote account of the validator",
            "example": "beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar"
          },
          "website": {
            "type": "string",
            "description": "The website for the validator",
            "example": "https://www.coinbase.com/cloud",
            "nullable": true
          }
        }
      },
      "ValidatorsDataModel": {
        "type": "object",
        "required": [
          "validators",
          "nakamoto"
        ],
        "properties": {
          "nakamoto": {
            "type": "integer",
            "format": "int64",
            "description": "The nakamoto coefficient number"
          },
          "validators": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "account",
                "voteAccount",
                "network",
                "name",
                "softwareVersion",
                "commission",
                "ip",
                "lastVote",
                "stake",
                "stakeInSol",
                "jito",
                "delinquent"
              ],
              "properties": {
                "account": {
                  "type": "string",
                  "description": "The public key of the validator",
                  "example": "XkCriyrNwS3G4rzAXtG5B1nnvb5Ka1JtCku93VqeKAr"
                },
                "asnCode": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The asn code related to this validator",
                  "example": "16509",
                  "nullable": true
                },
                "asnId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The id of the asn related to this validator",
                  "example": "270",
                  "nullable": true
                },
                "asnName": {
                  "type": "string",
                  "description": "The asn name related to this validator",
                  "example": "AMAZON-02",
                  "nullable": true
                },
                "city": {
                  "type": "string",
                  "description": "The city where the validator is located",
                  "example": "Tokyo",
                  "nullable": true
                },
                "commission": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The commission of the validator",
                  "example": 8
                },
                "country": {
                  "type": "string",
                  "description": "The country where the validator is located",
                  "example": "Japan",
                  "nullable": true
                },
                "delinquent": {
                  "type": "boolean",
                  "description": "Whether the validator is delinquent",
                  "example": 1
                },
                "historicalSkipRate": {
                  "type": "number",
                  "format": "double",
                  "description": "The historical skip rate of this validator",
                  "example": 1,
                  "nullable": true
                },
                "ip": {
                  "type": "string",
                  "description": "The IP address of the validator",
                  "example": "35.77.221.213"
                },
                "isoCode": {
                  "type": "string",
                  "description": "The iso/country code of the country where the validator is located",
                  "example": "JP",
                  "nullable": true
                },
                "jito": {
                  "type": "boolean",
                  "description": "Whether the validator is using JITO",
                  "example": false
                },
                "keybaseUsername": {
                  "type": "string",
                  "description": "The keybase username of the validator",
                  "example": "coinbasecloud",
                  "nullable": true
                },
                "lastVote": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The most recent slot voted on by this vote account (Updated every 24hrs)",
                  "example": 209333679
                },
                "name": {
                  "type": "string",
                  "description": "The name of the validator",
                  "example": "Coinbase Cloud"
                },
                "network": {
                  "type": "string",
                  "description": "The network of the validator",
                  "example": "mainnet"
                },
                "skipRate": {
                  "type": "number",
                  "format": "double",
                  "description": "The skip rate from the epoch in skip_rate_epoch",
                  "example": 1,
                  "nullable": true
                },
                "skipRateEpoch": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The latest epoch with skip rate data",
                  "example": 1,
                  "nullable": true
                },
                "softwareVersion": {
                  "type": "string",
                  "description": "The software version of the validator",
                  "example": "1.14.20"
                },
                "stake": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The amount staked in lamports",
                  "example": 1
                },
                "stakeInSol": {
                  "type": "number",
                  "format": "double",
                  "description": "The amount staked in SOL",
                  "example": 1
                },
                "validatorDetails": {
                  "type": "string",
                  "description": "The additional details of the validator",
                  "example": "Coinbase Cloud provides secure and reliable blockchain infrastructure and APIs. Stake your crypto to our enterprise-grade validators.",
                  "nullable": true
                },
                "voteAccount": {
                  "type": "string",
                  "description": "The vote account of the validator",
                  "example": "beefKGBWeSpHzYBHZXwp5So7wdQGX6mu4ZHCsH3uTar"
                },
                "website": {
                  "type": "string",
                  "description": "The website for the validator",
                  "example": "https://www.coinbase.com/cloud",
                  "nullable": true
                }
              }
            },
            "description": "A list of validator object"
          }
        }
      },
      "TransactionQueryParam": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "string",
            "description": "Vector of actions to filter",
            "nullable": true
          },
          "amountFrom": {
            "type": "integer",
            "format": "int64",
            "description": "The amount range for selected mints.",
            "nullable": true,
            "minimum": 0
          },
          "amountTo": {
            "type": "integer",
            "format": "int64",
            "description": "The amount range for selected mints.",
            "nullable": true,
            "minimum": 0
          },
          "inflow": {
            "type": "boolean",
            "description": "Whether the transactions should include inflow movements.",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of transactions to return per page.\n\nThe default and maximum is 1000.",
            "nullable": true,
            "minimum": 0
          },
          "mint": {
            "type": "string",
            "description": "The mint(s) to query transactions for.\n\nMultiple mints can be specified by comma-separating them.",
            "nullable": true
          },
          "mints": {
            "type": "string",
            "description": "The mint(s) to query transactions for.\n\nMultiple mints can be specified by comma-separating them.",
            "nullable": true
          },
          "outflow": {
            "type": "boolean",
            "description": "Whether the transactions should include outflow movements.",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int64",
            "description": "The page number to retreive.\n\nThe default is 1.",
            "nullable": true,
            "minimum": 0
          },
          "program": {
            "type": "string",
            "description": "The program(s) to query transactions for.\n\nMultiple programs can be specified by comma-separating them.",
            "nullable": true
          },
          "programs": {
            "type": "string",
            "description": "The program(s) to query transactions for.\n\nMultiple programs can be specified by comma-separating them.",
            "nullable": true
          },
          "utcFrom": {
            "type": "integer",
            "format": "int64",
            "description": "The start UTC epoch to query transactions for.",
            "nullable": true,
            "minimum": 0
          },
          "utcTo": {
            "type": "integer",
            "format": "int64",
            "description": "The end UTC epoch to query transactions for.",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "TransfersRequestBody": {
        "type": "object",
        "required": [
          "transactionHashes"
        ],
        "properties": {
          "transactionHashes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of transaction hashes to query for",
            "example": [
              "112YB4bgpRpXpjea39vxY2bAgeDTkSB5RUjryp7dJitMao3WKHbMr2ACWfsZrWyCERGypQn3Yi5Xmao5JZwcYt5",
              "112TZTmNNcLBMxn3oCBAnh59JUeHDU6QfqHWGsfEoVKrpmYtAA37MoPpYWnkHrjtvgfg7NTRj6x7KiCY5cdyKEf"
            ]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "All Solana related account endpoints"
    },
    {
      "name": "Blocks",
      "description": "Blocks related endpoints"
    },
    {
      "name": "Bonfida Domains",
      "description": "Domain name service specifically for bonfida"
    },
    {
      "name": "IDLs",
      "description": "Retrieve indexed IDLs"
    },
    {
      "name": "Solana Daily Data",
      "description": "Solana statistics endpoint"
    },
    {
      "name": "Tokens",
      "description": "Token related endpoints"
    },
    {
      "name": "Transactions",
      "description": "All transactions related endpoints"
    },
    {
      "name": "Transfers",
      "description": "Transfer related endpoints"
    }
  ]
}